'use client'

import { useState } from 'react'
import { Brain, Play, CheckCircle, Loader2, AlertCircle } from 'lucide-react'

interface AnalysisRunnerProps {
  brief: string
  transcripts: string[]
  selectedModel: string
  onComplete: (result: any) => void
  onNext: () => void
  onBack: () => void
}

export function AnalysisRunner({ brief, transcripts, selectedModel, onComplete, onNext, onBack }: AnalysisRunnerProps) {
  const [analysisType, setAnalysisType] = useState<'normal' | 'parallel' | 'quick'>('normal')
  const [isRunning, setIsRunning] = useState(false)
  const [currentStep, setCurrentStep] = useState(0)
  const [error, setError] = useState<string | null>(null)
  const [currentTranscript, setCurrentTranscript] = useState<number>(0)
  const [currentChunk, setCurrentChunk] = useState<number>(0)
  const [totalChunks, setTotalChunks] = useState<number>(0)
  const [analysisPhase, setAnalysisPhase] = useState<string>('')

  const analysisSteps = [
    '–ê–Ω–∞–ª–∏–∑ –±—Ä–∏—Ñ–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
    '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤',
    '–í—ã—è–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è',
    '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    '–ê–Ω–∞–ª–∏–∑ –±–æ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫',
    '–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π',
    '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
    '–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫',
    '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–∞'
  ]

  const runAnalysis = async () => {
    setIsRunning(true)
    setError(null)
    setCurrentStep(0)
    setCurrentTranscript(0)
    setCurrentChunk(0)
    setTotalChunks(0)
    setAnalysisPhase('')

    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—à–∞–≥–æ–≤–æ
      for (let i = 0; i < analysisSteps.length; i++) {
        setCurrentStep(i)
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ
        if (i === 1) {
          setAnalysisPhase('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤')
          for (let t = 0; t < transcripts.length; t++) {
            setCurrentTranscript(t + 1)
            setTotalChunks(Math.ceil(transcripts[t].length / 1500))
            await new Promise(resolve => setTimeout(resolve, 200))
          }
        } else if (i === 2) {
          setAnalysisPhase('–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤')
          await new Promise(resolve => setTimeout(resolve, 300))
        } else if (i === 3) {
          setAnalysisPhase('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π')
          await new Promise(resolve => setTimeout(resolve, 300))
        } else if (i === 4) {
          setAnalysisPhase('–ê–Ω–∞–ª–∏–∑ –±–æ–ª–µ–π')
          await new Promise(resolve => setTimeout(resolve, 300))
        } else if (i === 5) {
          setAnalysisPhase('–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω')
          await new Promise(resolve => setTimeout(resolve, 300))
        } else if (i === 6) {
          setAnalysisPhase('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π')
          await new Promise(resolve => setTimeout(resolve, 300))
        } else if (i === 7) {
          setAnalysisPhase('–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫')
          await new Promise(resolve => setTimeout(resolve, 300))
        } else if (i === 8) {
          setAnalysisPhase('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–∞')
          await new Promise(resolve => setTimeout(resolve, 300))
        } else {
          await new Promise(resolve => setTimeout(resolve, 300))
        }
      }

      // –í—ã–∑—ã–≤–∞–µ–º API –∞–Ω–∞–ª–∏–∑–∞ —Å retry –ª–æ–≥–∏–∫–æ–π
      let response: Response | undefined
      let lastError: Error | null = null
      
      for (let attempt = 1; attempt <= 3; attempt++) {
        try {
          console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/3 –≤—ã–∑–æ–≤–∞ API –∞–Ω–∞–ª–∏–∑–∞...`)
          
          const controller = new AbortController()
          const startTime = Date.now()
          const timeoutId = setTimeout(() => {
            console.log('‚è∞ –¢–∞–π–º–∞—É—Ç 20 –º–∏–Ω—É—Ç –∏—Å—Ç–µ–∫, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å')
            controller.abort()
          }, 1200000) // 20 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç –¥–ª—è Railway
          
          // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –µ—â–µ –∏–¥–µ—Ç
          const progressInterval = setInterval(() => {
            const elapsed = Math.round((Date.now() - startTime) / 1000)
            console.log(`‚è≥ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É–∂–µ ${elapsed} —Å–µ–∫—É–Ω–¥...`)
          }, 30000)
          
          const apiUrl = typeof window !== 'undefined' && window.location.hostname.includes('railway') 
            ? 'https://analyzer-v25-production.up.railway.app/api/analyze'
            : '/api/analyze'
          
          response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              brief,
              transcripts,
              model: selectedModel,
              analysisMode: analysisType === 'quick' ? 'quick' : 'full'
            }),
            signal: controller.signal
          })
          
          clearTimeout(timeoutId)
          clearInterval(progressInterval)
          
          console.log(`üìä –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: ${response.status} ${response.statusText}`)
          console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:`, Object.fromEntries(response.headers.entries()))
          
          if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${response.status}`)
          }
          
          console.log('‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ–ø—ã—Ç–æ–∫')
          // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
          break
          
        } catch (error: any) {
          lastError = error
          clearInterval(progressInterval)
          console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
          
          if (error.name === 'AbortError') {
            console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (20 –º–∏–Ω—É—Ç)')
          } else if (error.message?.includes('network') || error.message?.includes('fetch')) {
            console.log('üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º...')
          }
          
          if (attempt === 3) {
            throw lastError
          }
          
          // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
          const delay = Math.min(2000 * Math.pow(2, attempt - 1), 10000)
          console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...`)
          await new Promise(resolve => setTimeout(resolve, delay))
        }
      }

      if (!response) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫')
      }

      console.log('üì¶ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JSON –æ—Ç–≤–µ—Ç–∞...')
      const result = await response.json()
      console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω, —Ä–∞–∑–º–µ—Ä:', JSON.stringify(result).length, '—Å–∏–º–≤–æ–ª–æ–≤')
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      result.inputData = {
        briefLength: brief.length,
        transcriptCount: transcripts.length,
        totalTranscriptLength: transcripts.reduce((sum, t) => sum + t.length, 0),
        analysisType
      }

      // –í—ã–∑—ã–≤–∞–µ–º callback —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
      console.log('üéØ –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ callback...')
      onComplete(result)
      console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω!')
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      onNext()
      
    } catch (err) {
      console.error('Analysis error:', err)
      setError(err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ')
    } finally {
      setIsRunning(false)
    }
  }

  const getStepStatus = (stepIndex: number) => {
    if (stepIndex < currentStep) return 'completed'
    if (stepIndex === currentStep) return 'current'
    return 'pending'
  }

  return (
    <div className="max-w-4xl mx-auto space-y-8">
      <div className="text-center space-y-4">
        <div className="flex justify-center">
          <div className="flex h-16 w-16 items-center justify-center rounded-full bg-primary/10">
            <Brain className="h-8 w-8 text-primary" />
          </div>
        </div>
        <h2 className="text-3xl font-bold text-foreground">–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞</h2>
        <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
          –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ AI-–∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        </p>
      </div>

      {/* Input Summary */}
      <div className="bg-card border border-border rounded-lg p-6">
        <h3 className="text-xl font-semibold text-foreground mb-4">–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <p className="text-sm text-muted-foreground">–ë—Ä–∏—Ñ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è</p>
            <p className="font-medium">{brief.length} —Å–∏–º–≤–æ–ª–æ–≤</p>
          </div>
          <div>
            <p className="text-sm text-muted-foreground">–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã</p>
            <p className="font-medium">{transcripts.length} –∏–Ω—Ç–µ—Ä–≤—å—é</p>
            <p className="text-xs text-muted-foreground mt-1">
              –û–±—â–∏–π –æ–±—ä–µ–º: {transcripts.reduce((sum, t) => sum + t.length, 0).toLocaleString()} —Å–∏–º–≤–æ–ª–æ–≤
            </p>
          </div>
        </div>
      </div>

      {/* Analysis Options */}
      <div className="bg-card border border-border rounded-lg p-6">
        <h3 className="text-xl font-semibold text-foreground mb-4">–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <label className="flex items-start space-x-3 p-4 border-2 rounded-lg cursor-pointer">
            <input
              type="radio"
              name="analysisType"
              value="normal"
              checked={analysisType === 'normal'}
              onChange={(e) => setAnalysisType(e.target.value as 'normal' | 'parallel' | 'quick')}
              className="mt-1 text-primary"
            />
            <div>
              <div className="font-medium text-foreground">–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑</div>
              <p className="text-sm text-muted-foreground">
                –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤
              </p>
            </div>
          </label>
          
          <label className="flex items-start space-x-3 p-4 border-2 rounded-lg cursor-pointer">
            <input
              type="radio"
              name="analysisType"
              value="parallel"
              checked={analysisType === 'parallel'}
              onChange={(e) => setAnalysisType(e.target.value as 'normal' | 'parallel' | 'quick')}
              className="mt-1 text-primary"
            />
            <div>
              <div className="font-medium text-foreground">–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</div>
              <p className="text-sm text-muted-foreground">
                –£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
              </p>
            </div>
          </label>

          <label className="flex items-start space-x-3 p-4 border-2 rounded-lg cursor-pointer">
            <input
              type="radio"
              name="analysisType"
              value="quick"
              checked={analysisType === 'quick'}
              onChange={(e) => setAnalysisType(e.target.value as 'normal' | 'parallel' | 'quick')}
              className="mt-1 text-primary"
            />
            <div>
              <div className="font-medium text-foreground">–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑</div>
              <p className="text-sm text-muted-foreground">
                –≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —Ä–µ–∂–∏–º (~$1-2)
              </p>
            </div>
          </label>
        </div>
      </div>

      {/* Start Button */}
      <div className="text-center">
        <button
          onClick={runAnalysis}
          disabled={isRunning}
          className="inline-flex items-center px-8 py-3 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
        >
          {isRunning ? (
            <>
              <Loader2 className="h-5 w-5 mr-2 animate-spin" />
              –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...
            </>
          ) : (
            <>
              <Play className="h-5 w-5 mr-2" />
              –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑
            </>
          )}
        </button>
      </div>

      {/* Progress */}
      {isRunning && (
        <div className="bg-card border border-border rounded-lg p-6">
          <h3 className="text-xl font-semibold text-foreground mb-4">–ü—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞</h3>
          
          {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ */}
          {analysisPhase && (
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
              <div className="flex items-center space-x-2 mb-2">
                <Loader2 className="w-4 h-4 text-blue-600 animate-spin" />
                <span className="text-sm font-medium text-blue-800">{analysisPhase}</span>
              </div>
              {currentTranscript > 0 && (
                <div className="text-sm text-blue-700">
                  –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ {currentTranscript} –∏–∑ {transcripts.length}
                  {totalChunks > 0 && ` ‚Ä¢ –ß–∞–Ω–∫–æ–≤: ${currentChunk}/${totalChunks}`}
                </div>
              )}
            </div>
          )}
          
          <div className="space-y-4">
            {analysisSteps.map((step, index) => {
              const status = getStepStatus(index)
              return (
                <div key={index} className="flex items-center space-x-3">
                  <div className={`flex h-8 w-8 items-center justify-center rounded-full border-2 ${
                    status === 'completed' 
                      ? 'border-green-500 bg-green-500 text-white'
                      : status === 'current'
                      ? 'border-primary bg-primary text-white'
                      : 'border-muted bg-muted text-muted-foreground'
                  }`}>
                    {status === 'completed' ? (
                      <CheckCircle className="h-4 w-4" />
                    ) : status === 'current' ? (
                      <Loader2 className="h-4 w-4 animate-spin" />
                    ) : (
                      <span className="text-xs">{index + 1}</span>
                    )}
                  </div>
                  <span className={`text-sm ${
                    status === 'completed' 
                      ? 'text-green-600 font-medium'
                      : status === 'current'
                      ? 'text-primary font-medium'
                      : 'text-muted-foreground'
                  }`}>
                    {step}
                  </span>
                </div>
              )
            })}
          </div>
        </div>
      )}

      {/* Error Display */}
      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-6">
          <div className="flex items-center space-x-3">
            <AlertCircle className="h-5 w-5 text-red-500" />
            <div>
              <h3 className="text-lg font-semibold text-red-800">–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</h3>
              <p className="text-red-700">{error}</p>
            </div>
          </div>
        </div>
      )}

      {/* Navigation */}
      <div className="flex justify-center pt-8 space-x-4">
        <button
          onClick={onBack}
          disabled={isRunning}
          className="px-6 py-2 border border-muted text-muted-foreground rounded-lg hover:bg-muted/50 disabled:opacity-50 transition-colors"
        >
          –ù–∞–∑–∞–¥
        </button>
        
        {/* –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º" –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ */}
        {!isRunning && currentStep === analysisSteps.length - 1 && (
          <button
            onClick={onNext}
            className="px-6 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors"
          >
            –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
          </button>
        )}
      </div>
    </div>
  )
}
