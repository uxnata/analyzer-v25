import { NextRequest, NextResponse } from 'next/server'

// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è API route –¥–æ 30 –º–∏–Ω—É—Ç
export const maxDuration = 1800

// CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è CORS
export async function OPTIONS() {
  return new NextResponse(null, { 
    status: 200,
    headers: corsHeaders
  })
}

interface AnalysisResult {
  overview: {
    totalInterviews: number
    totalProblems: number
    totalNeeds: number
    summary: string
    keyFindings: string[]
    methodology: string
    goalAchievement?: any[]
  }
  insights: {
    painPoints: any[]
    userNeeds: any[]
    opportunities: string[]
    behavioralPatterns: any[]
    detailedInsights: any[]
  }
  personas: {
    primary: any
    secondary: any
    segments?: any[]
  }
  recommendations: {
    immediate: string[]
    shortTerm: string[]
    longTerm: string[]
    detailedRecommendations?: any[]
    roiCalculation?: string
    nextSteps?: any[]
    riskMitigation?: any[]
  }
  metrics: {
    satisfaction: number
    usability: number
    engagement: number
    conversion: number
    nps: number
    retention: number
  }
  interviewSummaries: any[]
  powerfulQuotes: string[]
  briefQuestions: any[]
  keyInsights: any[]
  crossQuestionInsights: any[]
  unexpectedFindings: any[]
  successMetrics: string[]
}

interface InterviewSummary {
  id: number
  summary: string
  length: number
  sentenceCount: number
  sentiment: number
  keyQuotes: string[]
  painPoints: any[]
  needs: any[]
  insights: any[]
  emotionalJourney: any[]
  contradictions: any[]
  businessPains: any[]
  opportunities: any[]
  briefRelatedFindings: any
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
const config = {
  analysis: {
    min_interviews_recommended: 8,
    use_speaker_splitting: true,
    chunk_size: 1500, // –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
    chunk_overlap: 150, // –£–º–µ–Ω—å—à–∏–ª–∏ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ
    max_chunks_per_interview: 8, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤
    max_retries: 2 // –£–º–µ–Ω—å—à–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ OpenRouter API
async function callOpenRouterAPI(prompt: string, model: string = 'anthropic/claude-3.5-sonnet', maxRetries = 3): Promise<string> {
  const apiKey = process.env.OPENROUTER_API_KEY
  
  if (!apiKey) {
    throw new Error('OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
  }
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –≤—ã–∑–æ–≤–∞ OpenRouter API...`)
      
      const controller = new AbortController()
      const timeoutId = setTimeout(() => controller.abort(), 300000) // 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
      
      const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json',
          'HTTP-Referer': 'http://localhost:3000',
          'X-Title': 'UX Analyzer'
        },
        body: JSON.stringify({
          model: model === 'google/gemini-1.5-pro' ? 'anthropic/claude-3.5-sonnet' : model,
          messages: [
            {
              role: 'user',
              content: prompt
            }
          ],
          max_tokens: 4000,
          temperature: 0.3
        }),
        signal: controller.signal
      })
      
      clearTimeout(timeoutId)

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status}`)
      }

      const data = await response.json()
      return data.choices[0].message.content
    } catch (error: any) {
      console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
      if (error.name === 'AbortError') {
        console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (60 —Å–µ–∫—É–Ω–¥)')
      } else if (error.message?.includes('network') || error.message?.includes('fetch')) {
        console.log('üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º...')
      }
      
      if (attempt === maxRetries) {
        throw error
      }
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
      const delay = Math.min(1000 * Math.pow(2, attempt - 1), 10000) // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, –º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...`)
      await new Promise(resolve => setTimeout(resolve, delay))
    }
  }
  
  throw new Error('All API attempts failed')
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
function extractJSON(text: string): any {
  try {
    console.log('üìù –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:', text.substring(0, 200));
    
    // –ü–æ–ø—ã—Ç–∫–∞ 1: –≤–µ—Å—å –æ—Ç–≤–µ—Ç - JSON
    try {
      const result = JSON.parse(text);
      console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ 1)');
      return result;
    } catch (e1: any) {
      console.log('‚ùå –ü–æ–ø—ã—Ç–∫–∞ 1 –Ω–µ —É–¥–∞–ª–∞—Å—å:', e1?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      
      // –ü–æ–ø—ã—Ç–∫–∞ 2: JSON –º–µ–∂–¥—É ```json –∏ ```
      const jsonMatch = text.match(/```json\s*([\s\S]*?)\s*```/);
      if (jsonMatch) {
        try {
          const result = JSON.parse(jsonMatch[1]);
          console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ 2)');
          return result;
        } catch (e2: any) {
          console.log('‚ùå –ü–æ–ø—ã—Ç–∫–∞ 2 –Ω–µ —É–¥–∞–ª–∞—Å—å:', e2?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
      }

      // –ü–æ–ø—ã—Ç–∫–∞ 3: JSON –º–µ–∂–¥—É { –∏ }
      const jsonMatch2 = text.match(/\{[\s\S]*\}/);
      if (jsonMatch2) {
        try {
          const result = JSON.parse(jsonMatch2[0]);
          console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ 3)');
          return result;
        } catch (e3: any) {
          console.log('‚ùå –ü–æ–ø—ã—Ç–∫–∞ 3 –Ω–µ —É–¥–∞–ª–∞—Å—å:', e3?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
      }

      // –ü–æ–ø—ã—Ç–∫–∞ 4: JSON –º–∞—Å—Å–∏–≤ –º–µ–∂–¥—É [ –∏ ]
      const jsonMatch3 = text.match(/\[[\s\S]*\]/);
      if (jsonMatch3) {
        try {
          const result = JSON.parse(jsonMatch3[0]);
          console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ 4)');
          return result;
        } catch (e4: any) {
          console.log('‚ùå –ü–æ–ø—ã—Ç–∫–∞ 4 –Ω–µ —É–¥–∞–ª–∞—Å—å:', e4?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
      }

      // –ü–æ–ø—ã—Ç–∫–∞ 5: –Ω–∞–π—Ç–∏ –ª—é–±—É—é JSON-–ø–æ–¥–æ–±–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      const jsonPatterns = [
        /\{[^{}]*\}/g,  // –ü—Ä–æ—Å—Ç—ã–µ –æ–±—ä–µ–∫—Ç—ã
        /\[[^\[\]]*\]/g,  // –ü—Ä–æ—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã
        /\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}/g,  // –í–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        /\[[^\[\]]*(?:\{[^{}]*\}[^\[\]]*)*\]/g  // –ú–∞—Å—Å–∏–≤—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
      ];
      
      for (let i = 0; i < jsonPatterns.length; i++) {
        const matches = text.match(jsonPatterns[i]);
        if (matches) {
          for (const match of matches) {
            try {
              const result = JSON.parse(match);
              console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ 5, –ø–∞—Ç—Ç–µ—Ä–Ω', i + 1, ')');
              return result;
            } catch (e5) {
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
            }
          }
        }
      }

      console.warn('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞');
      return {};
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ JSON:', error);
    return {};
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
function createOverlappingChunks(text: string, chunkSize = 1500, overlap = 150): string[] {
  const chunks: string[] = []
  let start = 0
  
  while (start < text.length && chunks.length < config.analysis.max_chunks_per_interview) {
    const end = Math.min(start + chunkSize, text.length)
    let chunk = text.slice(start, end)
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫–æ–Ω—á–∏—Ç—å –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if (end < text.length) {
      const lastSentenceEnd = chunk.lastIndexOf('.')
      if (lastSentenceEnd > chunkSize * 0.7) {
        chunk = chunk.slice(0, lastSentenceEnd + 1)
      }
    }
    
    chunks.push(chunk.trim())
    start = end - overlap
  }
  
  return chunks
}

// –î–µ—Ç–µ–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Å–ø–∏–∫–µ—Ä–æ–≤
function detectSpeakerFormat(text: string): boolean {
  const speakerPatterns = [
    /^[–ê-–Ø][–∞-—è]+:\s/m,
    /^[A-Z][a-z]+:\s/m,
    /^–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä:\s/m,
    /^–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç:\s/m
  ]
  
  return speakerPatterns.some(pattern => pattern.test(text))
}

// –°–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏–∫–µ—Ä–æ–≤
function createSpeakerBasedChunks(text: string): string[] {
  const lines = text.split('\n')
  const chunks: string[] = []
  let currentChunk = ''
  
  for (const line of lines) {
    if (line.trim().match(/^[–ê-–Ø][–∞-—è]+:\s/) || line.trim().match(/^[A-Z][a-z]+:\s/)) {
      if (currentChunk.length > 1000) {
        chunks.push(currentChunk.trim())
        currentChunk = line + '\n'
      } else {
        currentChunk += line + '\n'
      }
    } else {
      currentChunk += line + '\n'
    }
  }
  
  if (currentChunk.trim()) {
    chunks.push(currentChunk.trim())
  }
  
  return chunks
}

// –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —á–∞–Ω–∫–∞
async function summarizeChunk(chunk: string, model: string): Promise<string> {
  const prompt = `–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é —Å–≤–æ–¥–∫—É —ç—Ç–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é. –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, —Ü–∏—Ç–∞—Ç—ã –∏ –∏–Ω—Å–∞–π—Ç—ã:

${chunk}

–°–≤–æ–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
- –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã
- –í–∞–∂–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
- –ü—Ä–æ–±–ª–µ–º—ã –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
- –ë–∏–∑–Ω–µ—Å-–∞—Å–ø–µ–∫—Ç—ã`

  try {
    const response = await callOpenRouterAPI(prompt, model)
    return response
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —á–∞–Ω–∫–∞:', error)
    return chunk.slice(0, 500) + '...'
  }
}

// –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Ç–µ–º
async function analyzeProfileAndThemes(summary: string, interviewNum: number, briefContext: string, model: string): Promise<any> {
  const prompt = `${briefContext}

–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π UX-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ç–µ—Ä–≤—å—é ‚Ññ${interviewNum} –∏ –∏–∑–≤–ª–µ–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–µ –∏ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º–∞—Ö.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é
- –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
- –ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∞ –¢–û–ß–ù–´–ú–ò –¶–ò–¢–ê–¢–ê–ú–ò (–º–∏–Ω–∏–º—É–º 60 —Å–ª–æ–≤)
- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É–∫–∞–∑—ã–≤–∞–π "–ù–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä–≤—å—é"

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
{
    "respondent_profile": {
        "demographics": "–¢–û–õ–¨–ö–û —Ç–æ, —á—Ç–æ —è–≤–Ω–æ —Å–∫–∞–∑–∞–Ω–æ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é",
        "occupation": "–¢–û–õ–¨–ö–û –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è",
        "experience_level": "–¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
        "context": "–¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
        "tech_literacy": "–¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ",
        "motivations": "–¢–û–õ–¨–ö–û —è–≤–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
        "lifestyle": "–¢–û–õ–¨–ö–û –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è",
        "archetype": "–ù–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö"
    },
    "key_themes": [
        {
            "theme": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö",
            "importance": "high/medium/low",
            "frequency": "–ö–∞–∫ —á–∞—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è",
            "quotes": ["–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ –º–∏–Ω–∏–º—É–º 60 —Å–ª–æ–≤"],
            "relevance_to_brief": "–ö–∞–∫ —Å–≤—è–∑–∞–Ω–æ —Å —Ü–µ–ª—è–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
        }
    ]
}

–°–£–ú–ú–ê–†–ò:
${summary.slice(0, 4000)}`

  const response = await callOpenRouterAPI(prompt, model)
  return extractJSON(response)
}

// –ê–Ω–∞–ª–∏–∑ –±–æ–ª–µ–π –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
async function analyzePainsAndNeeds(summary: string, interviewNum: number, briefContext: string, model: string): Promise<any> {
  const prompt = `${briefContext}

–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤—ã—è–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –∏ —Å–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ç–µ—Ä–≤—å—é ‚Ññ${interviewNum} –∏ –Ω–∞–π–¥–∏ –í–°–ï –±–æ–ª–∏, –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
1. –ö–ê–ñ–î–ê–Ø –±–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∞ –¢–û–ß–ù–û–ô –¶–ò–¢–ê–¢–û–ô (–º–∏–Ω–∏–º—É–º 60 —Å–ª–æ–≤)
2. –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –ø—Ä–æ–±–ª–µ–º—ã - —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ø–í–ù–û —Å–∫–∞–∑–∞–Ω–æ
3. –°–≤—è–∑—ã–≤–∞–π –∫–∞–∂–¥—É—é –Ω–∞—Ö–æ–¥–∫—É —Å —Ü–µ–ª—è–º–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –±—Ä–∏—Ñ–∞
4. –ü—Ä–∏–≤–æ–¥–∏ –í–°–ï –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é
5. frequency –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ß–ò–°–õ–û–ú - —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–æ–±–ª–µ–º–∞ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä–≤—å—é (1, 2, 3...)
6. severity –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ß–ò–°–õ–û–ú –æ—Ç 1 –¥–æ 10:
   - 1-3: –Ω–∏–∑–∫–∞—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å (–ª–µ–≥–∫–∏–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞)
   - 4-6: —Å—Ä–µ–¥–Ω—è—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å (–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã)
   - 7-10: –≤—ã—Å–æ–∫–∞—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –±–ª–æ–∫–∏—Ä—É—é—Ç —Ä–∞–±–æ—Ç—É)

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:
{
    "pain_points": [
        {
            "pain": "–û–ø–∏—Å–∞–Ω–∏–µ –±–æ–ª–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "severity": 7,
            "frequency": 1,
            "impact": "–í–ª–∏—è–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "quotes": ["–¶–∏—Ç–∞—Ç–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ"],
            "user_segments": ["–°–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
            "percentage_affected": 80,
            "context": "–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã"
        }
    ],
    "needs": [
        {
            "need": "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏",
            "priority": "high",
            "frequency": 1,
            "impact": "–í–∞–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "quotes": ["–¶–∏—Ç–∞—Ç–∞ –æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏"],
            "user_segments": ["–°–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
            "percentage_affected": 85,
            "context": "–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏"
        }
    ]
}

–°–£–ú–ú–ê–†–ò:
${summary.slice(0, 4000)}`

  const response = await callOpenRouterAPI(prompt, model)
  return extractJSON(response)
}

// –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –∏ –∏–Ω—Å–∞–π—Ç–æ–≤
async function analyzeEmotionsAndInsights(summary: string, interviewNum: number, briefContext: string, model: string): Promise<any> {
  const prompt = `${briefContext}

–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –¥–∏–∑–∞–π–Ω—É –∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏.

–ü—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ—á–∞–π—à–∏–π –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é ‚Ññ${interviewNum}.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
1. –ö–ê–ñ–î–´–ô –∏–Ω—Å–∞–π—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –¢–û–ß–ù–´–• –¶–ò–¢–ê–¢–ê–• (–º–∏–Ω–∏–º—É–º 80 —Å–ª–æ–≤)
2. –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π —ç–º–æ—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ø–í–ù–û –≤—ã—Ä–∞–∂–µ–Ω–æ
3. –ö–∞–∂–¥—ã–π –≤—ã–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –ø–æ–º–æ–≥–∞—Ç—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±—Ä–∏—Ñ–∞
4. –ü—Ä–∏–≤–æ–¥–∏ –í–°–ï –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ —Ü–∏—Ç–∞—Ç—ã

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{
    "emotional_journey": [
        {
            "moment": "–¢–û–ß–ù–û–ï –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–º–µ–Ω—Ç–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "trigger": "–ß—Ç–æ –¢–û–ß–ù–û –≤—ã–∑–≤–∞–ª–æ —ç–º–æ—Ü–∏—é",
            "emotion": "–¢–û–ß–ù–û–ï –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
            "emotion_family": "primary/secondary/social/cognitive",
            "intensity": 8,
            "valence": "positive/negative/mixed",
            "duration": "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è",
            "body_language": "–¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–æ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "quote": "–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ –º–∏–Ω–∏–º—É–º 80 —Å–ª–æ–≤",
            "coping": "–ö–∞–∫ —Å–ø—Ä–∞–≤–ª—è–ª—Å—è –ü–û –°–õ–û–í–ê–ú —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞",
            "impact": "–í–ª–∏—è–Ω–∏–µ –ü–û –°–õ–û–í–ê–ú —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞",
            "underlying_need": "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
            "relevance_to_brief": "–°–≤—è–∑—å —Å —Ü–µ–ª—è–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
        }
    ],
    "insights": [
        {
            "insight": "–ì–ª—É–±–æ–∫–∏–π –∏–Ω—Å–∞–π—Ç –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –¥–∞–Ω–Ω—ã—Ö (–º–∏–Ω–∏–º—É–º 80 —Å–ª–æ–≤)",
            "insight_type": "behavioral/emotional/cognitive/motivational",
            "confidence": "high/medium/low",
            "evidence": [
                "–¢–û–ß–ù–û–ï –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
                "–ï—â–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ",
                "–¢—Ä–µ—Ç—å–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ"
            ],
            "contradiction": "–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å",
            "hidden_motivation": "–°–∫—Ä—ã—Ç–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
            "design_opportunity": "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –¥–∏–∑–∞–π–Ω–∞",
            "business_impact": "–í–ª–∏—è–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å",
            "quotes": ["–ü–û–õ–ù–ê–Ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞ –º–∏–Ω–∏–º—É–º 80 —Å–ª–æ–≤", "–ï—â–µ —Ü–∏—Ç–∞—Ç–∞"],
            "relevance_to_brief": "–ö–∞–∫ –ø–æ–º–æ–≥–∞–µ—Ç –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–µ–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
        }
    ]
}

–°–£–ú–ú–ê–†–ò:
${summary}`

  const response = await callOpenRouterAPI(prompt, model)
  return extractJSON(response)
}

// –ê–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∞—Ç –∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
async function analyzeQuotesAndContradictions(summary: string, interviewNum: number, briefContext: string, model: string): Promise<any> {
  const prompt = `${briefContext}

–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–∏—Å–∫—É—Ä—Å-–∞–Ω–∞–ª–∏–∑—É –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É —Ç–µ–∫—Å—Ç–∞.

–ù–∞–π–¥–∏ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∏ –í–°–ï –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ –∏–Ω—Ç–µ—Ä–≤—å—é ‚Ññ${interviewNum}.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
1. –ö–ê–ñ–î–ê–Ø —Ü–∏—Ç–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ü–û–õ–ù–û–ô (–º–∏–Ω–∏–º—É–º 80 —Å–ª–æ–≤)
2. –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è - —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ
3. –ö–∞–∂–¥–∞—è –Ω–∞—Ö–æ–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–º–æ–≥–∞—Ç—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±—Ä–∏—Ñ–∞
4. –ü—Ä–∏–≤–æ–¥–∏ –í–°–ï –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{
    "quotes": [
        {
            "quote": "–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ –º–∏–Ω–∏–º—É–º 80 —Å–ª–æ–≤",
            "context": "–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã",
            "importance": "–ü–æ—á–µ–º—É –≤–∞–∂–Ω–∞",
            "type": "pain/need/insight/contradiction",
            "emotional_tone": "–¢–æ–Ω —Ü–∏—Ç–∞—Ç—ã",
            "relevance_to_brief": "–ö–∞–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"
        }
    ],
    "contradictions": [
        {
            "contradiction": "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è",
            "statement_1": "–ü–µ—Ä–≤–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "statement_2": "–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—â–µ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "context": "–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è",
            "possible_explanation": "–í–æ–∑–º–æ–∂–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ",
            "importance": "–í–∞–∂–Ω–æ—Å—Ç—å –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
            "quotes": ["–¶–∏—Ç–∞—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ"]
        }
    ]
}

–°–£–ú–ú–ê–†–ò:
${summary}`

  const response = await callOpenRouterAPI(prompt, model)
  return extractJSON(response)
}

// –ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–∞—Å–ø–µ–∫—Ç–æ–≤
async function analyzeBusinessAspects(summary: string, interviewNum: number, briefContext: string, model: string): Promise<any> {
  const prompt = `${briefContext}

–¢—ã ‚Äî –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ç–µ—Ä–≤—å—é ‚Ññ${interviewNum} —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ —Ä–∏—Å–∫–æ–≤.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
1. –ö–ê–ñ–î–ê–Ø –Ω–∞—Ö–æ–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö
2. –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–±–ª–µ–º—ã
3. –°–≤—è–∑—ã–≤–∞–π —Å —Ü–µ–ª—è–º–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –±—Ä–∏—Ñ–∞
4. –ü—Ä–∏–≤–æ–¥–∏ –í–°–ï –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{
    "business_pains": [
        {
            "pain": "–ë–∏–∑–Ω–µ—Å-–ø—Ä–æ–±–ª–µ–º–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "impact": "–í–ª–∏—è–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å",
            "frequency": "–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–±–ª–µ–º—ã",
            "cost": "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è",
            "quotes": ["–¶–∏—Ç–∞—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—É"]
        }
    ],
    "user_problems": [
        {
            "problem": "–ü—Ä–æ–±–ª–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "severity": "–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å",
            "frequency": "–ß–∞—Å—Ç–æ—Ç–∞",
            "impact": "–í–ª–∏—è–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "quotes": ["–¶–∏—Ç–∞—Ç—ã –æ –ø—Ä–æ–±–ª–µ–º–µ"]
        }
    ],
    "opportunities": [
        {
            "opportunity": "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è",
            "potential_impact": "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ",
            "effort_required": "–¢—Ä–µ–±—É–µ–º—ã–µ —É—Å–∏–ª–∏—è",
            "priority": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
            "quotes": ["–¶–∏—Ç–∞—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å"]
        }
    ]
}

–°–£–ú–ú–ê–†–ò:
${summary}`

  const response = await callOpenRouterAPI(prompt, model)
  return extractJSON(response)
}

// –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é
async function deepAnalyzeInterview(transcript: string, interviewNum: number, briefContext: string, model: string): Promise<InterviewSummary> {
  console.log(`   üé§ –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é ${interviewNum}...`)
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ–º —á–∞–Ω–∫–∏
  let chunks: string[]
  if (config.analysis.use_speaker_splitting && detectSpeakerFormat(transcript)) {
    console.log(`   üé§ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é ${interviewNum}`)
    chunks = createSpeakerBasedChunks(transcript)
  } else {
    chunks = createOverlappingChunks(transcript, config.analysis.chunk_size, config.analysis.chunk_overlap)
  }

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
  if (chunks.length > config.analysis.max_chunks_per_interview) {
    chunks = chunks.slice(0, config.analysis.max_chunks_per_interview)
    console.log(`   ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤ –¥–æ ${config.analysis.max_chunks_per_interview}`)
  }

  // –°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫
  const chunkSummaries: string[] = []
  for (let i = 0; i < chunks.length; i++) {
    if (chunks.length > 1) {
      console.log(`   –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–∏ ${i+1}/${chunks.length}...`)
    }
    
    const chunkSummary = await summarizeChunk(chunks[i], model)
    if (chunkSummary) {
      chunkSummaries.push(chunkSummary)
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    if (i < chunks.length - 1) {
      await new Promise(resolve => setTimeout(resolve, 100))
    }
  }

  const combinedSummary = chunkSummaries.join('\n\n')

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
  const painsAndNeeds = await analyzePainsAndNeeds(combinedSummary, interviewNum, briefContext, model)
  const quotesAndContradictions = await analyzeQuotesAndContradictions(combinedSummary, interviewNum, briefContext, model)
  
  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InterviewSummary —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
  const summary: InterviewSummary = {
    id: interviewNum,
    summary: combinedSummary,
    length: transcript.length,
    sentenceCount: transcript.split(/[.!?]+/).length,
    sentiment: 0,
    keyQuotes: quotesAndContradictions.quotes?.map((q: any) => q.quote) || [],
    painPoints: painsAndNeeds.pain_points || [],
    needs: painsAndNeeds.needs || [],
    insights: [],
    emotionalJourney: [],
    contradictions: quotesAndContradictions.contradictions || [],
    businessPains: [],
    opportunities: [],
    briefRelatedFindings: {}
  }

  return summary
}

// –ö—Ä–æ—Å—Å-–∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é
async function crossAnalyzeInterviews(summaries: InterviewSummary[], briefContext: string, model: string): Promise<any> {
  
  const allPains = summaries.flatMap(s => s.painPoints)
  const allNeeds = summaries.flatMap(s => s.needs)
  const allInsights = summaries.flatMap(s => s.insights)

  const prompt = `${briefContext}

–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–∏–Ω—Ç–µ–∑—É –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã—è–≤–ª–µ–Ω–∏—é –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–°–ï –∏–Ω—Ç–µ—Ä–≤—å—é –≤–º–µ—Å—Ç–µ –∏ –Ω–∞–π–¥–∏ –æ–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –∏ –∏–Ω—Å–∞–π—Ç—ã.

–î–ê–ù–ù–´–ï –ò–ó –í–°–ï–• –ò–ù–¢–ï–†–í–¨–Æ:
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤—å—é: ${summaries.length}
–û–±—â–∏–µ –±–æ–ª–∏: ${allPains.length}
–û–±—â–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏: ${allNeeds.length}
–û–±—â–∏–µ –∏–Ω—Å–∞–π—Ç—ã: ${allInsights.length}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
1. –ù–∞–π–¥–∏ –û–ë–©–ò–ï –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º–µ–∂–¥—É –∏–Ω—Ç–µ—Ä–≤—å—é
2. –í—ã—è–≤–∏ –ü–†–û–¢–ò–í–û–†–ï–ß–ò–Ø –≤ –¥–∞–Ω–Ω—ã—Ö
3. –û–ø—Ä–µ–¥–µ–ª–∏ –°–ê–ú–´–ï –í–ê–ñ–ù–´–ï –∏–Ω—Å–∞–π—Ç—ã
4. –°–≤—è–∂–∏ —Å —Ü–µ–ª—è–º–∏ –±—Ä–∏—Ñ–∞

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{
    "common_patterns": [
        {
            "pattern": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞",
            "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
            "frequency": "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è",
            "importance": "high/medium/low",
            "evidence": ["–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
            "implications": "–í—ã–≤–æ–¥—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞"
        }
    ],
    "contradictions": [
        {
            "contradiction": "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è",
            "evidence": ["–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è"],
            "possible_explanations": ["–í–æ–∑–º–æ–∂–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è"],
            "importance": "–í–∞–∂–Ω–æ—Å—Ç—å –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
        }
    ],
    "key_insights": [
        {
            "insight": "–ö–ª—é—á–µ–≤–æ–π –∏–Ω—Å–∞–π—Ç (–º–∏–Ω–∏–º—É–º 100 —Å–ª–æ–≤)",
            "confidence": "high/medium/low",
            "evidence": ["–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"],
            "business_impact": "–í–ª–∏—è–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å",
            "design_implications": "–í—ã–≤–æ–¥—ã –¥–ª—è –¥–∏–∑–∞–π–Ω–∞"
        }
    ]
}`

  const response = await callOpenRouterAPI(prompt, model)
  return extractJSON(response)
}

// –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –±–æ–ª–µ–π
function deduplicatePains(summaries: InterviewSummary[]): any[] {
  console.log('   üîÑ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –±–æ–ª–µ–π...')
  
  const allPains = summaries.flatMap(s => s.painPoints)
  const uniquePains: any[] = []
  const seenPains = new Set<string>()

  for (const pain of allPains) {
    if (pain && pain.pain) {
      const painKey = pain.pain.toLowerCase().slice(0, 100)
      if (!seenPains.has(painKey) && painKey.length > 20) {
        seenPains.add(painKey)
        uniquePains.push(pain)
      }
    }
  }

  // –ï—Å–ª–∏ –±–æ–ª–µ–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - –ù–ï –°–û–ó–î–ê–ï–ú –ó–ê–ì–õ–£–®–ö–ò
  if (uniquePains.length === 0) {
    console.log('   ‚ö†Ô∏è –ë–æ–ª–∏ –Ω–µ –≤—ã—è–≤–ª–µ–Ω—ã –≤ –∏–Ω—Ç–µ—Ä–≤—å—é')
  }

  return uniquePains.slice(0, 20) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
}

// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
async function identifyBehavioralPatterns(summaries: InterviewSummary[], crossAnalysis: any, briefContext: string, model: string): Promise<any[]> {
  console.log('   üß† –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...')
  
  const prompt = `${briefContext}

–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –æ–ø—ã—Ç—É.

–ù–∞–π–¥–∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ ${summaries.length} –∏–Ω—Ç–µ—Ä–≤—å—é.

–î–ê–ù–ù–´–ï:
${JSON.stringify(crossAnalysis, null, 2)}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
1. –ù–∞–π–¥–∏ –†–ï–ê–õ–¨–ù–´–ï –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
2. –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –ø–∞—Ç—Ç–µ—Ä–Ω—ã
3. –ö–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω –¥–∞–Ω–Ω—ã–º–∏
4. –°–≤—è–∂–∏ —Å —Ü–µ–ª—è–º–∏ –±—Ä–∏—Ñ–∞

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{
    "behavioral_patterns": [
        {
            "pattern": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞",
            "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 80 —Å–ª–æ–≤)",
            "frequency": "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è",
            "triggers": ["–¢—Ä–∏–≥–≥–µ—Ä—ã –ø–∞—Ç—Ç–µ—Ä–Ω–∞"],
            "manifestation": "–ö–∞–∫ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è",
            "user_segments": ["–ö–∞–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç"],
            "design_implications": "–í—ã–≤–æ–¥—ã –¥–ª—è –¥–∏–∑–∞–π–Ω–∞",
            "evidence": ["–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"]
        }
    ]
}`

  const response = await callOpenRouterAPI(prompt, model)
  const result = extractJSON(response)
  return result.behavioral_patterns || []
}

// –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏
async function segmentAudience(summaries: InterviewSummary[], patterns: any[], briefContext: string, model: string): Promise<any[]> {
  console.log('   üë• –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏...')
  
  const prompt = `${briefContext}

–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–∑–¥–∞–Ω–∏—é –ø–µ—Ä—Å–æ–Ω.

–°–æ–∑–¥–∞–π —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ ${summaries.length} –∏–Ω—Ç–µ—Ä–≤—å—é.

–ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–ï –ü–ê–¢–¢–ï–†–ù–´:
${JSON.stringify(patterns, null, 2)}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
1. –°–æ–∑–¥–∞–π –†–ï–ê–õ–¨–ù–´–ï —Å–µ–≥–º–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
2. –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Å–µ–≥–º–µ–Ω—Ç—ã
3. –ö–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ç–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
4. –°–≤—è–∂–∏ —Å —Ü–µ–ª—è–º–∏ –±—Ä–∏—Ñ–∞

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{
    "user_segments": [
        {
            "name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞",
            "size": "–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏",
            "characteristics": ["–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞"],
            "pain_points": ["–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–µ–≥–º–µ–Ω—Ç–∞"],
            "needs": ["–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏"],
            "behaviors": ["–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏"],
            "motivations": ["–ú–æ—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞"],
            "quotes": ["–¶–∏—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π —Å–µ–≥–º–µ–Ω—Ç–∞"]
        }
    ]
}`

  const response = await callOpenRouterAPI(prompt, model)
  const result = extractJSON(response)
  return result.user_segments || []
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω
async function createPersonas(segments: any[], briefContext: string, model: string): Promise<any> {
  console.log('   üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω...')
  
  const prompt = `${briefContext}

–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–µ—Ä—Å–æ–Ω.

–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–°–ï–ì–ú–ï–ù–¢–´:
${JSON.stringify(segments, null, 2)}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
1. –°–æ–∑–¥–∞–π –†–ï–ê–õ–¨–ù–´–ï –ø–µ—Ä—Å–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
2. –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
3. –ö–∞–∂–¥–∞—è –ø–µ—Ä—Å–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–π
4. –°–≤—è–∂–∏ —Å —Ü–µ–ª—è–º–∏ –±—Ä–∏—Ñ–∞

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{
    "primary": {
        "name": "–ò–º—è –ø–µ—Ä—Å–æ–Ω—ã",
        "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 150 —Å–ª–æ–≤)",
        "demographics": "–î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
        "goals": ["–¶–µ–ª–∏ –ø–µ—Ä—Å–æ–Ω—ã"],
        "frustrations": ["–†–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏—è"],
        "motivations": ["–ú–æ—Ç–∏–≤–∞—Ü–∏–∏"],
        "behaviors": ["–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏"],
        "quotes": ["–¶–∏—Ç–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω—ã"]
    },
    "secondary": {
        "name": "–ò–º—è –≤—Ç–æ—Ä–∏—á–Ω–æ–π –ø–µ—Ä—Å–æ–Ω—ã",
        "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 150 —Å–ª–æ–≤)",
        "demographics": "–î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
        "goals": ["–¶–µ–ª–∏ –ø–µ—Ä—Å–æ–Ω—ã"],
        "frustrations": ["–†–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏—è"],
        "motivations": ["–ú–æ—Ç–∏–≤–∞—Ü–∏–∏"],
        "behaviors": ["–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏"],
        "quotes": ["–¶–∏—Ç–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω—ã"]
    }
}`

  const response = await callOpenRouterAPI(prompt, model)
  return extractJSON(response)
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
async function generateRecommendations(painPoints: any[], needs: any[], patterns: any[], briefContext: string, model: string): Promise<any> {
  console.log('   üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...')
  
  const prompt = `${briefContext}

–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ UX-–¥–∏–∑–∞–π–Ω—É.

–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.

–î–ê–ù–ù–´–ï:
–ë–æ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏: ${painPoints.length}
–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏: ${needs.length}
–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: ${patterns.length}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
1. –°–æ–∑–¥–∞–π –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
2. –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–π –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
3. –°–≤—è–∂–∏ —Å —Ü–µ–ª—è–º–∏ –±—Ä–∏—Ñ–∞
4. –£–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{
    "immediate": [
        "–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (1-2 –Ω–µ–¥–µ–ª–∏)"
    ],
    "shortTerm": [
        "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è (1-3 –º–µ—Å—è—Ü–∞)"
    ],
    "longTerm": [
        "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø–ª–∞–Ω—ã (3-12 –º–µ—Å—è—Ü–µ–≤)"
    ],
    "detailedRecommendations": [
        {
            "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 100 —Å–ª–æ–≤)",
            "priority": "high/medium/low",
            "effort": "high/medium/low",
            "impact": "high/medium/low",
            "timeline": "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏",
            "resources": "–¢—Ä–µ–±—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã",
            "success_metrics": ["–ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—Ö–∞"]
        }
    ]
}`

  const response = await callOpenRouterAPI(prompt, model)
  return extractJSON(response)
}

// –ë—ã—Å—Ç—Ä—ã–π –∫—Ä–æ—Å—Å-–∞–Ω–∞–ª–∏–∑
async function quickCrossAnalysis(summaries: InterviewSummary[], briefContext: string, model: string): Promise<any> {
  
  const allPains = summaries.flatMap(s => s.painPoints)
  const allNeeds = summaries.flatMap(s => s.needs)
  
  const prompt = `${briefContext}

–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–∏–Ω—Ç–µ–∑—É –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–ë—ã—Å—Ç—Ä–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π ${summaries.length} –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –Ω–∞–π–¥–∏ –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã.

–î–ê–ù–ù–´–ï:
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤—å—é: ${summaries.length}
–û–±—â–∏–µ –±–æ–ª–∏: ${allPains.length}
–û–±—â–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏: ${allNeeds.length}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{
    "key_insights": [
        {
            "insight": "–ö–ª—é—á–µ–≤–æ–π –∏–Ω—Å–∞–π—Ç (–º–∏–Ω–∏–º—É–º 80 —Å–ª–æ–≤)",
            "confidence": "high/medium/low",
            "evidence": ["–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"]
        }
    ]
}`

  try {
    const response = await callOpenRouterAPI(prompt, model)
    const result = extractJSON(response)
    return result
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∫—Ä–æ—Å—Å-–∞–Ω–∞–ª–∏–∑–∞:', error)
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç - –ù–ï –°–û–ó–î–ê–ï–ú –ó–ê–ì–õ–£–®–ö–ò
    return { 
      key_insights: [],
      contradictions: []
    }
  }
}

// –ë—ã—Å—Ç—Ä–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏
async function quickSegmentAudience(summaries: InterviewSummary[], briefContext: string, model: string): Promise<any[]> {
  console.log('   üë• –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
  
  const prompt = `${briefContext}

–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–í–ê–ñ–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã—Ö –ª—é–¥–µ–π –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é. –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π —Å–µ–≥–º–µ–Ω—Ç—ã!

–ò–ù–¢–ï–†–í–¨–Æ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê (${summaries.length} —à—Ç—É–∫):
${JSON.stringify(summaries.map(s => ({ summary: s.summary, keyQuotes: s.keyQuotes })), null, 2)}

–ù–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:

–í–ê–ñ–ù–û: –ï—Å–ª–∏ —É —Ç–µ–±—è ${summaries.length} –∏–Ω—Ç–µ—Ä–≤—å—é, —Ç–æ size –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "${summaries.length === 1 ? '1 –∏–∑ 1 –∏–Ω—Ç–µ—Ä–≤—å—é (100%)' : `${summaries.length} –∏–∑ ${summaries.length} –∏–Ω—Ç–µ—Ä–≤—å—é (100%)`}"

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{
    "user_segments": [
        {
            "name": "–†–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "size": "${summaries.length === 1 ? '1 –∏–∑ 1 –∏–Ω—Ç–µ—Ä–≤—å—é (100%)' : `${summaries.length} –∏–∑ ${summaries.length} –∏–Ω—Ç–µ—Ä–≤—å—é (100%)`}",
            "characteristics": ["–†–µ–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
            "pain_points": ["–†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
            "needs": ["–†–µ–∞–ª—å–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
            "behaviors": ["–†–µ–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
            "motivations": ["–†–µ–∞–ª—å–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
            "quotes": ["–†–µ–∞–ª—å–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"]
        }
    ]
}`

  try {
    const response = await callOpenRouterAPI(prompt, model)
    const result = extractJSON(response)
    return result.user_segments || []
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:', error)
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - –ù–ï –°–û–ó–î–ê–ï–ú –ó–ê–ì–õ–£–®–ö–ò
    return []
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –±—Ä–∏—Ñ–∞
async function generateBriefQuestions(summaries: InterviewSummary[], briefContext: string, model: string): Promise<any[]> {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –≥–∏–ø–æ—Ç–µ–∑—ã –∏–∑ –±—Ä–∏—Ñ–∞
  const extractedQuestions = extractQuestionsFromBrief(briefContext)
  const extractedHypotheses = extractHypothesesFromBrief(briefContext)
  
  if (extractedQuestions.length === 0 && extractedHypotheses.length === 0) {
    console.log('   ‚ö†Ô∏è –í–æ–ø—Ä–æ—Å—ã –∏ –≥–∏–ø–æ—Ç–µ–∑—ã –∏–∑ –±—Ä–∏—Ñ–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    return []
  }
  
  const prompt = `${briefContext}

–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –¥–∞–π –ò–°–ß–ï–†–ü–´–í–ê–Æ–©–ò–ï –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –≥–∏–ø–æ—Ç–µ–∑—ã –∏–∑ –±—Ä–∏—Ñ–∞.

–ù–ê–ô–î–ï–ù–ù–´–ï –í–û–ü–†–û–°–´ –ò–ó –ë–†–ò–§–ê:
${extractedQuestions.length > 0 ? extractedQuestions.map((q, i) => `${i + 1}. ${q}`).join('\n') : '–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}

–ù–ê–ô–î–ï–ù–ù–´–ï –ì–ò–ü–û–¢–ï–ó–´ –ò–ó –ë–†–ò–§–ê:
${extractedHypotheses.length > 0 ? extractedHypotheses.map((h, i) => `${i + 1}. ${h}`).join('\n') : '–ì–∏–ø–æ—Ç–µ–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}

–î–ê–ù–ù–´–ï –ò–ó –ò–ù–¢–ï–†–í–¨–Æ:
${JSON.stringify(summaries.map(s => ({
  interview_id: s.id,
  key_insights: s.insights,
  pain_points: s.painPoints,
  user_needs: s.needs,
  key_quotes: s.keyQuotes
})), null, 2)}

–î–ª—è –ö–ê–ñ–î–û–ì–û –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –±—Ä–∏—Ñ–∞ –¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é.
–î–ª—è –ö–ê–ñ–î–û–ô –≥–∏–ø–æ—Ç–µ–∑—ã –æ–ø—Ä–µ–¥–µ–ª–∏: –ü–û–î–¢–í–ï–†–î–ò–õ–ê–°–¨ –∏–ª–∏ –ù–ï –ü–û–î–¢–í–ï–†–î–ò–õ–ê–°–¨ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é.

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{
    "questions": [
        {
            "question": "–¢–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –±—Ä–∏—Ñ–∞",
            "answer": "–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é (–º–∏–Ω–∏–º—É–º 100 —Å–ª–æ–≤)",
            "confidence": "high/medium/low",
            "evidence": ["–ü–æ–ª–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ 1 –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é (–º–∏–Ω–∏–º—É–º 50 —Å–ª–æ–≤)", "–ü–æ–ª–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ 2 –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é (–º–∏–Ω–∏–º—É–º 50 —Å–ª–æ–≤)"],
            "recommendations": ["–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1", "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2"]
        }
    ],
    "hypotheses": [
        {
            "hypothesis": "–¢–æ—á–Ω–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞ –∏–∑ –±—Ä–∏—Ñ–∞",
            "status": "confirmed/not_confirmed/partially_confirmed",
            "analysis": "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é (–º–∏–Ω–∏–º—É–º 100 —Å–ª–æ–≤)",
            "evidence": ["–ü–æ–ª–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ 1 –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é (–º–∏–Ω–∏–º—É–º 50 —Å–ª–æ–≤)", "–ü–æ–ª–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ 2 –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é (–º–∏–Ω–∏–º—É–º 50 —Å–ª–æ–≤)"],
            "confidence": "high/medium/low"
        }
    ]
}`

  try {
    const response = await callOpenRouterAPI(prompt, model)
    const result = JSON.parse(response)
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –≥–∏–ø–æ—Ç–µ–∑—ã –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const allItems = [
      ...(result.questions || []).map((q: any) => ({ ...q, type: 'question' })),
      ...(result.hypotheses || []).map((h: any) => ({ ...h, type: 'hypothesis' }))
    ]
    
    return allItems
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±—Ä–∏—Ñ–∞:', error)
    return []
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑ –∏–∑ –±—Ä–∏—Ñ–∞
function extractHypothesesFromBrief(briefText: string): string[] {
  const hypotheses: string[] = []
  const lines = briefText.split('\n')
  
  let inHypothesesSection = false
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i]
    const trimmedLine = line.trim()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–µ–∫—Ü–∏–∏ –≥–∏–ø–æ—Ç–µ–∑
    if (trimmedLine.toLowerCase().includes('–≥–∏–ø–æ—Ç–µ–∑') || 
        trimmedLine.toLowerCase().includes('hypothesis') ||
        trimmedLine.toLowerCase().includes('–ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω')) {
      inHypothesesSection = true
      continue
    }
    
    // –ï—Å–ª–∏ –º—ã –≤ —Å–µ–∫—Ü–∏–∏ –≥–∏–ø–æ—Ç–µ–∑ –∏ —Å—Ç—Ä–æ–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –≥–∏–ø–æ—Ç–µ–∑–∞
    if (inHypothesesSection && trimmedLine.length > 10) {
      // –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞ (-, *, 1., 2. –∏ —Ç.–¥.)
      const cleanHypothesis = trimmedLine.replace(/^[-*‚Ä¢]\s*/, '').replace(/^\d+\.\s*/, '').trim()
      if (cleanHypothesis.length > 10) {
        hypotheses.push(cleanHypothesis)
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–µ–∫—Ü–∏–∏ –≥–∏–ø–æ—Ç–µ–∑
    if (trimmedLine && 
        (trimmedLine.toLowerCase().includes('—Ü–µ–ª') || 
         trimmedLine.toLowerCase().includes('–∞—É–¥–∏—Ç–æ—Ä') ||
         trimmedLine.toLowerCase().includes('–º–µ—Ç—Ä–∏–∫') ||
         trimmedLine.toLowerCase().includes('–≤–æ–ø—Ä–æ—Å'))) {
      inHypothesesSection = false
    }
  }
  
  return hypotheses
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±—Ä–∏—Ñ–∞
function extractQuestionsFromBrief(briefText: string): string[] {
  const questions: string[] = []
  const lines = briefText.split('\n')
  
  let inQuestionsSection = false
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i]
    const trimmedLine = line.trim()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–µ–∫—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    if (trimmedLine.toLowerCase().includes('–≤–æ–ø—Ä–æ—Å') || 
        trimmedLine.toLowerCase().includes('question')) {
      inQuestionsSection = true
      continue
    }
    
    // –ï—Å–ª–∏ –º—ã –≤ —Å–µ–∫—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞
    if (inQuestionsSection && trimmedLine.includes('?')) {
      // –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞ (-, *, 1., 2. –∏ —Ç.–¥.)
      const cleanQuestion = trimmedLine.replace(/^[-*‚Ä¢]\s*/, '').replace(/^\d+\.\s*/, '').trim()
      if (cleanQuestion.length > 10) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞
        questions.push(cleanQuestion)
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–µ–∫—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    if (trimmedLine && !trimmedLine.includes('?') && 
        (trimmedLine.toLowerCase().includes('—Ü–µ–ª') || 
         trimmedLine.toLowerCase().includes('–∞—É–¥–∏—Ç–æ—Ä') ||
         trimmedLine.toLowerCase().includes('–º–µ—Ç—Ä–∏–∫'))) {
      inQuestionsSection = false
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏, –∏—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
  if (questions.length === 0) {
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i]
      const trimmedLine = line.trim()
      if (trimmedLine.includes('?') && trimmedLine.length > 10) {
        const cleanQuestion = trimmedLine.replace(/^[-*‚Ä¢]\s*/, '').replace(/^\d+\.\s*/, '').trim()
        if (cleanQuestion.length > 10) {
          questions.push(cleanQuestion)
        }
      }
    }
  }
  
  return questions
}

// –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω
async function quickCreatePersonas(segments: any[], briefContext: string, model: string): Promise<any> {
  console.log('   üë§ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
  
  const prompt = `${briefContext}

–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. 

–í–ê–ñ–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã—Ö –ª—é–¥–µ–π –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é. –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π!

–°–ï–ì–ú–ï–ù–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:
${JSON.stringify(segments, null, 2)}

–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–π –∞–Ω–∞–ª–∏–∑:

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{
    "primary": {
        "name": "–†–µ–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
        "description": "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
        "goals": ["–¶–µ–ª–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
        "frustrations": ["–ü—Ä–æ–±–ª–µ–º—ã –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
        "motivations": ["–ú–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"]
    },
    "secondary": {
        "name": "–î—Ä—É–≥–æ–π —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        "description": "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
        "goals": ["–¶–µ–ª–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
        "frustrations": ["–ü—Ä–æ–±–ª–µ–º—ã –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
        "motivations": ["–ú–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"]
    }
}`

  try {
    const response = await callOpenRouterAPI(prompt, model)
    const result = extractJSON(response)
    return result
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω:', error)
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç - –ù–ï –°–û–ó–î–ê–ï–ú –ó–ê–ì–õ–£–®–ö–ò
    return {
      primary: { name: '', description: '', goals: [], frustrations: [], motivations: [] },
      secondary: { name: '', description: '', goals: [], frustrations: [], motivations: [] }
    }
  }
}

// –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
async function quickGenerateRecommendations(painPoints: any[], needs: any[], briefContext: string, model: string): Promise<any> {
  console.log('   üí° –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...')
  
  const prompt = `${briefContext}

–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

–ë—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞.

–î–ê–ù–ù–´–ï:
–ë–æ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏: ${painPoints.length}
–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏: ${needs.length}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{
    "immediate": ["–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"],
    "shortTerm": ["–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è"],
    "longTerm": ["–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø–ª–∞–Ω—ã"],
    "detailedRecommendations": [
        {
            "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 80 —Å–ª–æ–≤)",
            "priority": "high/medium/low",
            "effort": "high/medium/low",
            "impact": "high/medium/low"
        }
    ]
}`

  try {
    const response = await callOpenRouterAPI(prompt, model)
    const result = extractJSON(response)
    return result
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error)
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç - –ù–ï –°–û–ó–î–ê–ï–ú –ó–ê–ì–õ–£–®–ö–ò
    return {
      immediate: [],
      shortTerm: [],
      longTerm: [],
      detailedRecommendations: []
    }
  }
}

// –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
function calculateMetrics(summaries: InterviewSummary[], painPoints: any[], needs: any[]): any {
  
  const totalIssues = painPoints.length
  const totalNeeds = needs.length
  const totalInterviews = summaries.length
  
  // –ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä–∏–º - –º–µ—Ç—Ä–∏–∫–∏ —Ç—Ä–µ–±—É—é—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  return {
    satisfaction: '–¢—Ä–µ–±—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
    usability: '–¢—Ä–µ–±—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', 
    engagement: '–¢—Ä–µ–±—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
    conversion: '–¢—Ä–µ–±—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
    nps: '–¢—Ä–µ–±—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
    retention: '–¢—Ä–µ–±—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
    note: `–ù–∞–π–¥–µ–Ω–æ ${totalIssues} –ø—Ä–æ–±–ª–µ–º –∏ ${totalNeeds} –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –≤ ${totalInterviews} –∏–Ω—Ç–µ—Ä–≤—å—é. –ú–µ—Ç—Ä–∏–∫–∏ —Ç—Ä–µ–±—É—é—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π (–æ–ø—Ä–æ—Å—ã, A/B —Ç–µ—Å—Ç—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞).`
  }
}

// –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ - –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
async function quickAnalyzeInterview(transcript: string, interviewNum: number, briefContext: string, model: string): Promise<InterviewSummary> {
  console.log(`   üé§ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é ${interviewNum}...`)
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
  const maxLength = 8000
  const truncatedTranscript = transcript.length > maxLength 
    ? transcript.substring(0, maxLength) + '... [–æ–±—Ä–µ–∑–∞–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏]'
    : transcript

  const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ç–µ—Ä–≤—å—é ${interviewNum} –∏ –≤–µ—Ä–Ω–∏ JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.

–ë–†–ò–§ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:
${briefContext}

–ò–ù–¢–ï–†–í–¨–Æ ${interviewNum}:
${truncatedTranscript}

–í–µ—Ä–Ω–∏ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "pain_points": [
    {
      "pain": "–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
      "severity": 7,
      "frequency": 1,
      "impact": "–≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    }
  ],
  "quotes": [
    {
      "quote": "–∑–Ω–∞—á–∏–º–∞—è —Ü–∏—Ç–∞—Ç–∞ (–º–∏–Ω–∏–º—É–º 20 —Å–ª–æ–≤)",
      "context": "–∫–æ–Ω—Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã",
      "emotion": "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω"
    }
  ],
  "key_insights": [
    "–∫–ª—é—á–µ–≤–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ 1",
    "–∫–ª—é—á–µ–≤–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ 2"
  ]
}`

  try {
    const response = await callOpenRouterAPI(prompt, model)
    const data = extractJSON(response)
    
    return {
      id: interviewNum,
      summary: `–ò–Ω—Ç–µ—Ä–≤—å—é ${interviewNum}: ${data.pain_points?.length || 0} –ø—Ä–æ–±–ª–µ–º, ${data.quotes?.length || 0} —Ü–∏—Ç–∞—Ç`,
      length: transcript.length,
      sentenceCount: transcript.split(/[.!?]+/).length,
      sentiment: 0,
      keyQuotes: data.quotes?.map((q: any) => q.quote) || [],
      painPoints: data.pain_points || [],
      needs: [],
      insights: data.key_insights || [],
      emotionalJourney: [],
      contradictions: [],
      businessPains: [],
      opportunities: [],
      briefRelatedFindings: {}
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä–≤—å—é ${interviewNum}:`, error)
    return {
      id: interviewNum,
      summary: `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä–≤—å—é ${interviewNum}`,
      length: transcript.length,
      sentenceCount: transcript.split(/[.!?]+/).length,
      sentiment: 0,
      keyQuotes: [],
      painPoints: [],
      needs: [],
      insights: [],
      emotionalJourney: [],
      contradictions: [],
      businessPains: [],
      opportunities: [],
      briefRelatedFindings: {}
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
export async function POST(request: NextRequest) {
  try {
    
    const { brief, transcripts, model = 'anthropic/claude-3.5-sonnet', analysisMode = 'full' } = await request.json()
    
    console.log(`üìù –ë—Ä–∏—Ñ: ${brief.length} —Å–∏–º–≤–æ–ª–æ–≤`)
    console.log(`üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã: ${transcripts.length} –∏–Ω—Ç–µ—Ä–≤—å—é`)
    console.log(`ü§ñ –ú–æ–¥–µ–ª—å: ${model}`)
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞—Ö
    transcripts.forEach((transcript: string, index: number) => {
      console.log(`  –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç ${index + 1}: ${transcript.length} —Å–∏–º–≤–æ–ª–æ–≤`)
      console.log(`  –ù–∞—á–∞–ª–æ: ${transcript.substring(0, 100)}...`)
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:')
    console.log('   OPENROUTER_API_KEY:', process.env.OPENROUTER_API_KEY ? '‚úÖ' : '‚ùå')
    
    transcripts.forEach((transcript: string, index: number) => {
      console.log(`  –ò–Ω—Ç–µ—Ä–≤—å—é ${index + 1}: ${transcript.length} —Å–∏–º–≤–æ–ª–æ–≤`)
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
    if (transcripts.length < config.analysis.min_interviews_recommended) {
      console.log(`‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º ${config.analysis.min_interviews_recommended} –∏–Ω—Ç–µ—Ä–≤—å—é!`)
      console.log(`   –£ –≤–∞—Å: ${transcripts.length} –∏–Ω—Ç–µ—Ä–≤—å—é`)
    }

    const briefContext = brief ? `–ö–û–ù–¢–ï–ö–°–¢ –ë–†–ò–§–ê:\n${brief}\n\n` : ''

    // 1. –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é (–≤—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º)
    console.log(`üß† –ù–∞—á–∏–Ω–∞—é ${analysisMode === 'quick' ? '–±—ã—Å—Ç—Ä—ã–π' : '–≥–ª—É–±–æ–∫–∏–π'} –∞–Ω–∞–ª–∏–∑...`)
    const interviewSummaries: InterviewSummary[] = []
    
    for (let i = 0; i < transcripts.length; i++) {
      let summary: InterviewSummary
      
      if (analysisMode === 'quick') {
        // –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ - –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
        summary = await quickAnalyzeInterview(transcripts[i], i + 1, briefContext, model)
      } else {
        // –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        summary = await deepAnalyzeInterview(transcripts[i], i + 1, briefContext, model)
      }
      
      interviewSummaries.push(summary)
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      if (i < transcripts.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 200))
      }
    }

    // 2. –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –±–æ–ª–µ–π (–±—ã—Å—Ç—Ä–∞—è)
    console.log('üîÑ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –±–æ–ª–µ–π...')
    const deduplicatedPains = deduplicatePains(interviewSummaries)

    // 3. –ë—ã—Å—Ç—Ä—ã–π –∫—Ä–æ—Å—Å-–∞–Ω–∞–ª–∏–∑ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
    const crossAnalysis = await quickCrossAnalysis(interviewSummaries, briefContext, model)

    // 4. –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è
    console.log('üë• –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è...')
    const segments = await quickSegmentAudience(interviewSummaries, briefContext, model)

    // 5. –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω
    console.log('üë§ –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω...')
    const personas = await quickCreatePersonas(segments, briefContext, model)

    // 6. –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    console.log('üí° –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...')
    const recommendations = await quickGenerateRecommendations(deduplicatedPains, interviewSummaries.flatMap(s => s.needs), briefContext, model)

    // 8. –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
    const metrics = calculateMetrics(interviewSummaries, deduplicatedPains, interviewSummaries.flatMap(s => s.needs))

    // 9. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const result: AnalysisResult = {
      overview: {
        totalInterviews: transcripts.length,
        totalProblems: deduplicatedPains.length,
        totalNeeds: interviewSummaries.flatMap(s => s.needs).length,
        summary: `–ê–Ω–∞–ª–∏–∑ ${transcripts.length} –∏–Ω—Ç–µ—Ä–≤—å—é –≤—ã—è–≤–∏–ª ${deduplicatedPains.length} –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∏ ${interviewSummaries.flatMap(s => s.needs).length} –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`,
        keyFindings: crossAnalysis.key_insights?.map((i: any) => i.insight) || [],
        methodology: '–ì–ª—É–±–æ–∫–∏–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI-–∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤, –∫—Ä–æ—Å—Å-–∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.',
        goalAchievement: []
      },
      insights: {
        painPoints: deduplicatedPains,
        userNeeds: interviewSummaries.flatMap(s => s.needs),
        opportunities: recommendations.longTerm || [],
        behavioralPatterns: [],
        detailedInsights: crossAnalysis.key_insights || []
      },
      personas: {
        primary: personas.primary || {
          name: '–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          description: '–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
          goals: ['–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π'],
          frustrations: ['–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã'],
          motivations: ['–ö–ª—é—á–µ–≤—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏']
        },
        secondary: personas.secondary || {
          name: '–í—Ç–æ—Ä–∏—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          description: '–í—Ç–æ—Ä–∏—á–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
          goals: ['–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π'],
          frustrations: ['–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã'],
          motivations: ['–ö–ª—é—á–µ–≤—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏']
        },
        segments: segments
      },
      recommendations: {
        immediate: recommendations.immediate || [],
        shortTerm: recommendations.shortTerm || [],
        longTerm: recommendations.longTerm || [],
        detailedRecommendations: recommendations.detailedRecommendations || [],
        roiCalculation: `–ù–∞ –æ—Å–Ω–æ–≤–µ ${transcripts.length} –∏–Ω—Ç–µ—Ä–≤—å—é: –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π ROI 150% –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ ${deduplicatedPains.length} –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º`,
        nextSteps: [],
        riskMitigation: []
      },
      metrics: metrics,
      interviewSummaries: interviewSummaries,
      powerfulQuotes: interviewSummaries.flatMap(s => s.keyQuotes).filter(q => q && q.length > 0),
      briefQuestions: await generateBriefQuestions(interviewSummaries, briefContext, model),
      keyInsights: crossAnalysis.key_insights || [],
      crossQuestionInsights: crossAnalysis.contradictions || [],
      unexpectedFindings: [],
      successMetrics: [
        '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        '–°–Ω–∏–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∞–ª–æ–±',
        '–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏',
        '–£–ª—É—á—à–µ–Ω–∏–µ NPS'
      ]
    }

    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:')
    console.log(`  üéØ –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏: ${result.overview.totalNeeds}`)
    console.log(`  üìà –ú–µ—Ç—Ä–∏–∫–∏: ${JSON.stringify(result.metrics)}`)
    console.log(`  üë• –ü–µ—Ä—Å–æ–Ω–∞–∂–∏: ${result.personas.primary.name}, ${result.personas.secondary.name}`)

    return NextResponse.json(result, { headers: corsHeaders })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞' },
      { status: 500, headers: corsHeaders }
    )
  }
}
