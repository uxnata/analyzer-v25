#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è UX –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤ —Å—Ç–∏–ª–µ Reporter Dashboard
"""

import os
import sys
from typing import List, Optional
from pathlib import Path

class UserInterface:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤ —Å—Ç–∏–ª–µ Reporter Dashboard"""
    
    def __init__(self):
        self.current_brief = ""
        self.transcripts = []
        self.analysis_result = None
        
        # –¶–≤–µ—Ç–∞ –∏ —Å—Ç–∏–ª–∏ –≤ —Å—Ç–∏–ª–µ Reporter Dashboard
        self.colors = {
            'primary': '#030213',
            'secondary': '#ececf0',
            'accent': '#e9ebef',
            'muted': '#717182',
            'success': '#10b981',
            'warning': '#f59e0b',
            'danger': '#ef4444',
            'border': 'rgba(0, 0, 0, 0.1)',
            'background': '#ffffff',
            'card': '#ffffff'
        }
    
    def _print_header(self):
        """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å—Ç–∏–ª–µ Reporter Dashboard"""
        print(f"\n{'='*60}")
        print(f"üî¨ UX Analyzer V25.0 - OpenRouter Edition")
        print(f"{'='*60}")
        print(f"üéØ AI-powered analysis of your research data")
        print(f"{'='*60}\n")
    
    def _print_card(self, title: str, content: str, icon: str = "üìã"):
        """–í—ã–≤–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å—Ç–∏–ª–µ Card –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        print(f"\n{icon} {title}")
        print(f"{'‚îÄ' * (len(title) + 2)}")
        print(f"{content}")
        print(f"{'‚îÄ' * (len(title) + 2)}")
    
    def _print_metric(self, label: str, value: str, icon: str = "üìä"):
        """–í—ã–≤–æ–¥ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Å—Ç–∏–ª–µ –º–µ—Ç—Ä–∏–∫ –∏–∑ AnalysisScreen"""
        print(f"{icon} {label}: {value}")
    
    def _print_badge(self, text: str, variant: str = "default"):
        """–í—ã–≤–æ–¥ –±–µ–π–¥–∂–∞ –≤ —Å—Ç–∏–ª–µ Badge –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        colors = {
            'default': ('\033[38;5;240m', '\033[0m'),
            'success': ('\033[38;5;34m', '\033[0m'),
            'warning': ('\033[38;5;214m', '\033[0m'),
            'danger': ('\033[38;5;196m', '\033[0m'),
            'outline': ('\033[38;5;240m', '\033[0m')
        }
        
        color_start, color_end = colors.get(variant, colors['default'])
        print(f"{color_start}[{text}]{color_end}", end=" ")
    
    def _print_progress_bar(self, current: int, total: int, width: int = 40):
        """–í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –≤ —Å—Ç–∏–ª–µ Progress –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        filled = int(width * current / total)
        bar = '‚ñà' * filled + '‚ñë' * (width - filled)
        percentage = int(100 * current / total)
        print(f"[{bar}] {percentage}%")
    
    def run(self, analyzer, config):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self._print_header()
        
        while True:
            self._show_main_menu()
            choice = input(f"\n{self.colors['primary']}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-7):{self.colors['background']} ").strip()
            
            if choice == "1":
                self._load_brief(analyzer)
            elif choice == "2":
                self._load_transcripts()
            elif choice == "3":
                if self.transcripts and self.current_brief:
                    self._run_analysis(analyzer)
                else:
                    self._print_error("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –±—Ä–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã!")
            elif choice == "4":
                if self.analysis_result:
                    self._show_analysis_results()
                else:
                    self._print_error("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑!")
            elif choice == "5":
                if self.analysis_result:
                    self._generate_reports(config)
                else:
                    self._print_error("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑!")
            elif choice == "6":
                if self.analysis_result:
                    self._show_detailed_analysis()
                else:
                    self._print_error("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑!")
            elif choice == "7":
                self._print_success("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                self._print_error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    def _show_main_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ —Å—Ç–∏–ª–µ Reporter Dashboard"""
        print(f"\n{self.colors['primary']}üìã –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ{self.colors['background']}")
        print(f"{'‚îÄ' * 30}")
        
        menu_items = [
            "1. üìù –ó–∞–≥—Ä—É–∑–∏—Ç—å –±—Ä–∏—Ñ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
            "2. üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã", 
            "3. üß† –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑",
            "4. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            "5. üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã",
            "6. üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            "7. üö™ –í—ã—Ö–æ–¥"
        ]
        
        for item in menu_items:
            print(f"   {item}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤ —Å—Ç–∏–ª–µ –º–µ—Ç—Ä–∏–∫
        print(f"\n{self.colors['muted']}üìä –°–¢–ê–¢–£–° –ê–ù–ê–õ–ò–ó–ê:{self.colors['background']}")
        print(f"{'‚îÄ' * 20}")
        
        status_items = [
            ("–ë—Ä–∏—Ñ", "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω" if self.current_brief else "‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω"),
            ("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã", f"{len(self.transcripts)} —à—Ç."),
            ("–ê–Ω–∞–ª–∏–∑", "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω" if self.analysis_result else "‚ùå –ù–µ –ø—Ä–æ–≤–µ–¥–µ–Ω")
        ]
        
        for label, value in status_items:
            self._print_metric(label, value, "üìà")
    
    def _print_success(self, message: str):
        """–í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        print(f"\n{self.colors['success']}‚úÖ {message}{self.colors['background']}")
    
    def _print_error(self, message: str):
        """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        print(f"\n{self.colors['danger']}‚ùå {message}{self.colors['background']}")
    
    def _print_warning(self, message: str):
        """–í—ã–≤–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        print(f"\n{self.colors['warning']}‚ö†Ô∏è  {message}{self.colors['background']}")
    
    def _print_info(self, message: str):
        """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        print(f"\n{self.colors['primary']}‚ÑπÔ∏è  {message}{self.colors['background']}")
    
    def _load_brief(self, analyzer):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–∏—Ñ–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        self._print_card("–ó–ê–ì–†–£–ó–ö–ê –ë–†–ò–§–ê –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø", "–í–≤–µ–¥–∏—Ç–µ –±—Ä–∏—Ñ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑ —Ñ–∞–π–ª–∞")
        
        print(f"\n{self.colors['muted']}–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±—Ä–∏—Ñ–∞:{self.colors['background']}")
        print("–¶–µ–ª–∏:")
        print("  - –ü–æ–Ω—è—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("  - –í—ã—è–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        print("–í–æ–ø—Ä–æ—Å—ã:")
        print("  - –ö–∞–∫–∏–µ –±–æ–ª–∏ –∏—Å–ø—ã—Ç—ã–≤–∞—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏?")
        print("  - –ß—Ç–æ –∏—Ö –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç?")
        print("–ê—É–¥–∏—Ç–æ—Ä–∏—è: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        print("–ú–µ—Ç—Ä–∏–∫–∏: NPS, –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á")
        
        print(f"\n{self.colors['primary']}–í–≤–µ–¥–∏—Ç–µ –±—Ä–∏—Ñ (–∏–ª–∏ 'file' –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞):{self.colors['background']}")
        brief_input = input().strip()
        
        if brief_input.lower() == 'file':
            file_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: ").strip()
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    brief_input = f.read()
                self._print_success("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            except Exception as e:
                self._print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
                return
        
        if brief_input.strip():
            success = analyzer.set_brief(brief_input)
            if success:
                self.current_brief = brief_input
                self._print_success("–ë—Ä–∏—Ñ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                summary = analyzer.brief_manager.get_brief_summary()
                self._print_card("–ö–†–ê–¢–ö–û–ï –û–ü–ò–°–ê–ù–ò–ï –ë–†–ò–§–ê", summary, "üìã")
            else:
                self._print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—Ä–∏—Ñ–∞!")
        else:
            self._print_error("–ë—Ä–∏—Ñ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
    
    def _load_transcripts(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤"""
        self._print_card("–ó–ê–ì–†–£–ó–ö–ê –¢–†–ê–ù–°–ö–†–ò–ü–¢–û–í", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏")
        
        print(f"\n{self.colors['primary']}–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏:{self.colors['background']}")
        print("1. üìù –í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é")
        print("2. üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤")
        print("3. üé≠ –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ")
        
        choice = input(f"\n{self.colors['primary']}–í—ã–±–µ—Ä–∏—Ç–µ (1-3):{self.colors['background']} ").strip()
        
        if choice == "1":
            self._load_transcripts_manual()
        elif choice == "2":
            self._load_transcripts_from_files()
        elif choice == "3":
            self._load_demo_transcripts()
        else:
            self._print_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
    
    def _load_transcripts_manual(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é"""
        self._print_card("–í–í–û–î –¢–†–ê–ù–°–ö–†–ò–ü–¢–û–í –í–†–£–ß–ù–£–Æ", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é")
        
        self.transcripts = []
        transcript_num = 1
        
        while True:
            print(f"\n{self.colors['primary']}üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç #{transcript_num}{self.colors['background']}")
            print("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ + Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞):")
            
            transcript_text = ""
            print("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:")
            
            while True:
                line = input()
                if line.strip() == "":
                    break
                transcript_text += line + "\n"
            
            if transcript_text.strip():
                self.transcripts.append(transcript_text.strip())
                self._print_success(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç #{transcript_num} –¥–æ–±–∞–≤–ª–µ–Ω ({len(transcript_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                transcript_num += 1
            else:
                break
        
        self._print_success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.transcripts)} —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤")
    
    def _load_transcripts_from_files(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        self._print_card("–ó–ê–ì–†–£–ó–ö–ê –ò–ó –§–ê–ô–õ–û–í", "–£–∫–∞–∂–∏—Ç–µ –ø–∞–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏")
        
        directory = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏: ").strip()
        
        if not os.path.exists(directory):
            self._print_error("–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        text_extensions = ['.txt', '.md', '.doc', '.docx']
        found_files = []
        
        for ext in text_extensions:
            found_files.extend(Path(directory).glob(f"*{ext}"))
        
        if not found_files:
            self._print_error("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        print(f"\n{self.colors['success']}üìÅ –ù–∞–π–¥–µ–Ω–æ {len(found_files)} —Ñ–∞–π–ª–æ–≤:{self.colors['background']}")
        for i, file_path in enumerate(found_files, 1):
            print(f"   {i}. {file_path.name}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.transcripts = []
        for file_path in found_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if content.strip():
                        self.transcripts.append(content.strip())
                        self._print_success(f"–ó–∞–≥—Ä—É–∂–µ–Ω: {file_path.name}")
            except Exception as e:
                self._print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {file_path.name}: {e}")
        
        self._print_success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.transcripts)} —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤")
    
    def _load_demo_transcripts(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤"""
        self._print_card("–ó–ê–ì–†–£–ó–ö–ê –î–ï–ú–û –î–ê–ù–ù–´–•", "–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ—Ä–≤—å—é")
        
        demo_transcripts = [
            """–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç: –ù—É, –≤ —Ü–µ–ª–æ–º —É–¥–æ–±–Ω–æ, –Ω–æ –µ—Å—Ç—å –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–¥—Ä–∞–∂–∞—é—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–≥–¥–∞ —è –ø—ã—Ç–∞—é—Å—å –∑–∞–∫–∞–∑–∞—Ç—å –µ–¥—É, –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ú–Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫—Ä–∞–Ω–æ–≤, –≤—ã–±—Ä–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –ø–æ—Ç–æ–º –º–µ–Ω—é, –ø–æ—Ç–æ–º –∫–æ—Ä–∑–∏–Ω—É. –≠—Ç–æ —É—Ç–æ–º–ª—è–µ—Ç. –Ø –±—ã —Ö–æ—Ç–µ–ª, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≤ 2-3 –∫–ª–∏–∫–∞.

–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: –ê —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç –≤ —ç—Ç–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ?
–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç: –í–æ-–ø–µ—Ä–≤—ã—Ö, –º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞. –ò–Ω–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –∂–¥–∞—Ç—å –ø–æ 10-15 —Å–µ–∫—É–Ω–¥, –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –º–µ–Ω—é. –í–æ-–≤—Ç–æ—Ä—ã—Ö, –Ω–µ—É–¥–æ–±–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è. –Ø —á–∞—Å—Ç–æ —Ç–µ—Ä—è—é—Å—å, –≥–¥–µ –Ω–∞—Ö–æ–∂—É—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –•–æ—Ç–µ–ª–æ—Å—å –±—ã –≤–∏–¥–µ—Ç—å, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –∑–∞–∫–∞–∑–∞ —è –Ω–∞—Ö–æ–∂—É—Å—å.

–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: –ö–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ —Ä–µ—à–∞–µ—Ç–µ —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã?
–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç: –Ø –ø—Ä–æ—Å—Ç–æ —Ç–µ—Ä–ø–ª—é. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –Ω–µ—Ç, –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ –µ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ. –ù–æ –µ—Å–ª–∏ –±—ã –ø–æ—è–≤–∏–ª–æ—Å—å —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–µ, —è –±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è.""",
            
            """–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: –û–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–∏–ø–∏—á–Ω—ã–π –¥–µ–Ω—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç: –Ø –ø–æ–ª—å–∑—É—é—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º. –£—Ç—Ä–æ–º –∑–∞–∫–∞–∑—ã–≤–∞—é –∑–∞–≤—Ç—Ä–∞–∫, –≤–µ—á–µ—Ä–æ–º - —É–∂–∏–Ω. –ò–Ω–æ–≥–¥–∞ –∑–∞–∫–∞–∑—ã–≤–∞—é –æ–±–µ–¥, –µ—Å–ª–∏ –Ω–µ —É—Å–ø–µ–≤–∞—é –ø–æ–µ—Å—Ç—å –≤ –æ—Ñ–∏—Å–µ.

–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: –ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —á–∞—â–µ –≤—Å–µ–≥–æ?
–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç: –í –æ—Å–Ω–æ–≤–Ω–æ–º –∑–∞–∫–∞–∑ –µ–¥—ã –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏. –ï—â–µ —Å–º–æ—Ç—Ä—é —Ä–µ–π—Ç–∏–Ω–≥–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏ —á–∏—Ç–∞—é –æ—Ç–∑—ã–≤—ã. –ù–æ –æ—Ç–∑—ã–≤—ã —á–∞—Å—Ç–æ –±—ã–≤–∞—é—Ç –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏.

–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–ª—É—á—à–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏?
–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç: –•–æ—Ç–µ–ª–æ—Å—å –±—ã, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø–æ–º–∏–Ω–∞–ª–æ –º–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è. –°–µ–π—á–∞—Å –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –∑–∞–Ω–æ–≤–æ –≤—ã–±–∏—Ä–∞—Ç—å –ª—é–±–∏–º—ã–µ –±–ª—é–¥–∞. –ï—â–µ –±—ã–ª–æ –±—ã –∑–¥–æ—Ä–æ–≤–æ, –µ—Å–ª–∏ –±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –µ–¥—É –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥.""",
            
            """–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç–µ—Å—å.
–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç: –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ - —ç—Ç–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–∞—Å—Ç–æ –∑–∞–≤–∏—Å–∞–µ—Ç, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ —è –ø—ã—Ç–∞—é—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑. –û–¥–∏–Ω —Ä–∞–∑ —è —É–∂–µ –≤–≤–µ–ª –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã, –∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–∏—Å–ª–æ. –ü—Ä–∏—à–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –∏ –≤–≤–æ–¥–∏—Ç—å –≤—Å–µ –∑–∞–Ω–æ–≤–æ.

–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: –ê —á—Ç–æ –Ω–∞—Å—á–µ—Ç –¥–∏–∑–∞–π–Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞?
–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç: –î–∏–∑–∞–π–Ω –≤ —Ü–µ–ª–æ–º –ø–æ–Ω—è—Ç–Ω—ã–π, –Ω–æ –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ. –ú–Ω–µ —Å–ª–æ–∂–Ω–æ –ø–æ–ø–∞–¥–∞—Ç—å –ø–æ –Ω–∏–º –ø–∞–ª—å—Ü–µ–º, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ —è –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ. –•–æ—Ç–µ–ª–æ—Å—å –±—ã, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –±—ã–ª–∏ –±–æ–ª—å—à–µ –∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–ª–∏—Å—å —É–¥–æ–±–Ω–µ–µ.

–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: –ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏?
–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç: –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, —á—Ç–æ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω —Ä—è–¥–æ–º —Å –¥–æ–º–æ–º –∏–ª–∏ —Ä–∞–±–æ—Ç–æ–π. –ï—â–µ —É–¥–æ–±–Ω–æ, —á—Ç–æ –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –ù–æ —ç—Ç–æ –≤—Å–µ, —á—Ç–æ —è –º–æ–≥—É –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ."""
        ]
        
        self.transcripts = demo_transcripts
        self._print_success("–ó–∞–≥—Ä—É–∂–µ–Ω–æ 3 –¥–µ–º–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞")
        
        print(f"\n{self.colors['info']}üìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:{self.colors['background']}")
        for i, transcript in enumerate(demo_transcripts, 1):
            print(f"   {i}. –ò–Ω—Ç–µ—Ä–≤—å—é –æ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ –µ–¥—ã")
    
    def _run_analysis(self, analyzer):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞"""
        self._print_card("–ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ AI-–∞–Ω–∞–ª–∏–∑–∞")
        
        print(f"\n{self.colors['primary']}üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:{self.colors['background']}")
        print(f"   –ë—Ä–∏—Ñ: {analyzer.brief_manager.get_brief_summary()}")
        print(f"   –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã: {len(self.transcripts)} —à—Ç.")
        print(f"   –ú–æ–¥–µ–ª—å: {analyzer.client.model}")
        
        print(f"\n{self.colors['primary']}–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:{self.colors['background']}")
        print("1. üß† –û–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        print("2. ‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        
        choice = input(f"\n{self.colors['primary']}–í—ã–±–µ—Ä–∏—Ç–µ (1-2):{self.colors['background']} ").strip()
        
        confirm = input(f"\n{self.colors['warning']}–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑? (y/n):{self.colors['background']} ").strip().lower()
        if confirm != 'y':
            self._print_info("–ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω")
            return
        
        try:
            self._print_info("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
            print(f"\n{self.colors['primary']}üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞:{self.colors['background']}")
            self._print_progress_bar(0, 100)
            
            if choice == "2":
                self.analysis_result = analyzer.analyze_transcripts_parallel(self.transcripts)
            else:
                self.analysis_result = analyzer.analyze_transcripts(self.transcripts)
                
            self._print_success("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            self._print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
            self.analysis_result = None
    
    def _show_analysis_results(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å—Ç–∏–ª–µ AnalysisScreen"""
        if not self.analysis_result:
            self._print_error("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
            return
        
        self._print_card("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê", "–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –Ω–∞—Ö–æ–¥–∫–∏")
        
        result = self.analysis_result
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        print(f"\n{self.colors['primary']}üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:{self.colors['background']}")
        print(f"{'‚îÄ' * 25}")
        
        metrics = [
            ("–ò–Ω—Ç–µ—Ä–≤—å—é –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", str(result.total_interviews)),
            ("–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞", f"{result.analysis_duration:.1f} —Å–µ–∫"),
            ("API –≤—ã–∑–æ–≤–æ–≤", str(result.api_calls)),
            ("–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"${result.total_cost:.4f}")
        ]
        
        for label, value in metrics:
            self._print_metric(label, value, "üìä")
        
        if result.research_findings:
            findings = result.research_findings
            print(f"\n{self.colors['primary']}üîç –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–•–û–î–ö–ò:{self.colors['background']}")
            print(f"{'‚îÄ' * 25}")
            
            findings_metrics = [
                ("–ò–Ω—Å–∞–π—Ç–æ–≤", str(len(findings.key_insights))),
                ("–ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤", str(len(findings.behavioral_patterns))),
                ("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", str(len(findings.recommendations)))
            ]
            
            for label, value in findings_metrics:
                self._print_metric(label, value, "üí°")
            
            if findings.executive_summary:
                print(f"\n{self.colors['primary']}üìã –ö–†–ê–¢–ö–û–ï –†–ï–ó–Æ–ú–ï:{self.colors['background']}")
                print(f"{'‚îÄ' * 20}")
                print(f"{findings.executive_summary[:200]}...")
        
        print(f"\n{self.colors['primary']}üìù –î–ï–¢–ê–õ–ò –ü–û –ò–ù–¢–ï–†–í–¨–Æ:{self.colors['background']}")
        print(f"{'‚îÄ' * 25}")
        
        for i, summary in enumerate(result.interview_summaries, 1):
            print(f"\n   {i}. –ò–Ω—Ç–µ—Ä–≤—å—é #{summary.interview_id}")
            interview_metrics = [
                ("–ë–æ–ª–∏", str(len(summary.pain_points))),
                ("–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏", str(len(summary.needs))),
                ("–¶–∏—Ç–∞—Ç—ã", str(len(summary.quotes))),
                ("Sentiment", f"{summary.sentiment_score:.2f}")
            ]
            
            for label, value in interview_metrics:
                self._print_metric(f"     {label}", value, "üìä")
    
    def _show_detailed_analysis(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        if not self.analysis_result:
            self._print_error("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
            return
        
        self._print_card("–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó", "–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º")
        
        while True:
            print(f"\n{self.colors['primary']}–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:{self.colors['background']}")
            print("1. üìä –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã")
            print("2. üò§ –¢–æ—á–∫–∏ –±–æ–ª–∏")
            print("3. üéØ –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏")
            print("4. üí¨ –¶–∏—Ç–∞—Ç—ã")
            print("5. üîÑ –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
            print("6. üìà –ë–∏–∑–Ω–µ—Å-–∞—Å–ø–µ–∫—Ç—ã")
            print("7. üîô –ù–∞–∑–∞–¥")
            
            choice = input(f"\n{self.colors['primary']}–í—ã–±–µ—Ä–∏—Ç–µ (1-7):{self.colors['background']} ").strip()
            
            if choice == "1":
                self._show_key_insights()
            elif choice == "2":
                self._show_pain_points()
            elif choice == "3":
                self._show_needs()
            elif choice == "4":
                self._show_quotes()
            elif choice == "5":
                self._show_behavioral_patterns()
            elif choice == "6":
                self._show_business_aspects()
            elif choice == "7":
                break
            else:
                self._print_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
    
    def _show_key_insights(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã"""
        if not self.analysis_result.research_findings:
            self._print_error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–Ω—Å–∞–π—Ç–∞—Ö!")
            return
        
        insights = self.analysis_result.research_findings.key_insights
        if not insights:
            self._print_error("–ò–Ω—Å–∞–π—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        self._print_card(f"–ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´ ({len(insights)} —à—Ç.)", "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Å–∞–π—Ç–æ–≤")
        
        for i, insight in enumerate(insights, 1):
            print(f"\n{self.colors['primary']}{i}. {insight.get('problem_title', '–ò–Ω—Å–∞–π—Ç')}{self.colors['background']}")
            print(f"{'‚îÄ' * 40}")
            
            insight_data = [
                ("–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å", insight.get('severity', 'N/A')),
                ("–ó–∞—Ç—Ä–æ–Ω—É—Ç–æ", insight.get('affected_percentage', 'N/A')),
                ("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", insight.get('priority', 'N/A'))
            ]
            
            for label, value in insight_data:
                self._print_metric(f"   {label}", value, "üìä")
            
            description = insight.get('problem_description', 'N/A')
            print(f"\n   –û–ø–∏—Å–∞–Ω–∏–µ: {description[:200]}...")
    
    def _show_pain_points(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ—á–∫–∏ –±–æ–ª–∏"""
        all_pains = []
        for summary in self.analysis_result.interview_summaries:
            all_pains.extend(summary.pain_points or [])
        
        if not all_pains:
            self._print_error("–¢–æ—á–∫–∏ –±–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        self._print_card(f"–¢–û–ß–ö–ò –ë–û–õ–ò ({len(all_pains)} —à—Ç.)", "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        severity_groups = {'critical': [], 'high': [], 'medium': [], 'low': []}
        for pain in all_pains:
            severity = pain.get('severity', 'medium')
            if severity in severity_groups:
                severity_groups[severity].append(pain)
        
        for severity, pains in severity_groups.items():
            if not pains:
                continue
            
            severity_name = {
                'critical': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ',
                'high': '–í—ã—Å–æ–∫–∏–µ',
                'medium': '–°—Ä–µ–¥–Ω–∏–µ',
                'low': '–ù–∏–∑–∫–∏–µ'
            }.get(severity, severity)
            
            print(f"\n{self.colors['primary']}{severity_name.upper()} –ø—Ä–æ–±–ª–µ–º—ã ({len(pains)} —à—Ç.):{self.colors['background']}")
            print(f"{'‚îÄ' * 40}")
            
            for i, pain in enumerate(pains[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3
                print(f"\n   {i}. {pain.get('pain', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')[:100]}...")
                
                pain_data = [
                    ("–¢–∏–ø", pain.get('pain_type', 'N/A')),
                    ("–ö–æ–Ω—Ç–µ–∫—Å—Ç", pain.get('context', 'N/A')[:80] + "..." if len(pain.get('context', '')) > 80 else pain.get('context', 'N/A'))
                ]
                
                for label, value in pain_data:
                    if value != 'N/A':
                        self._print_metric(f"      {label}", value, "üìä")
    
    def _show_needs(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏"""
        all_needs = []
        for summary in self.analysis_result.interview_summaries:
            all_needs.extend(summary.needs or [])
        
        if not all_needs:
            self._print_error("–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        self._print_card(f"–ü–û–¢–†–ï–ë–ù–û–°–¢–ò ({len(all_needs)} —à—Ç.)", "–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        for i, need in enumerate(all_needs[:5], 1):  # –ú–∞–∫—Å–∏–º—É–º 5
            print(f"\n{self.colors['primary']}{i}. {need.get('need', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}{self.colors['background']}")
            print(f"{'‚îÄ' * 40}")
            
            need_data = [
                ("–¢–∏–ø", need.get('need_type', 'N/A')),
                ("–í–∞–∂–Ω–æ—Å—Ç—å", need.get('importance', 'N/A')),
                ("Job to be done", need.get('job_to_be_done', 'N/A')[:80] + "..." if len(need.get('job_to_be_done', '')) > 80 else need.get('job_to_be_done', 'N/A'))
            ]
            
            for label, value in need_data:
                if value != 'N/A':
                    self._print_metric(f"   {label}", value, "üìä")
    
    def _show_quotes(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã"""
        all_quotes = []
        for summary in self.analysis_result.interview_summaries:
            all_quotes.extend(summary.quotes or [])
        
        if not all_quotes:
            self._print_error("–¶–∏—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        self._print_card(f"–¶–ò–¢–ê–¢–´ ({len(all_quotes)} —à—Ç.)", "–ö–ª—é—á–µ–≤—ã–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        for i, quote in enumerate(all_quotes[:3], 1):  # –ú–∞–∫—Å–∏–º—É–º 3
            print(f"\n{self.colors['primary']}{i}. –¶–∏—Ç–∞—Ç–∞{self.colors['background']}")
            print(f"{'‚îÄ' * 20}")
            
            quote_text = quote.get('text', '–¢–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
            print(f"   {quote_text[:150]}...")
            
            quote_data = [
                ("–ö–æ–Ω—Ç–µ–∫—Å—Ç", quote.get('context', 'N/A')[:80] + "..." if len(quote.get('context', '')) > 80 else quote.get('context', 'N/A')),
                ("–ó–Ω–∞—á–∏–º–æ—Å—Ç—å", quote.get('significance', 'N/A')[:80] + "..." if len(quote.get('significance', '')) > 80 else quote.get('significance', 'N/A'))
            ]
            
            for label, value in quote_data:
                if value != 'N/A':
                    self._print_metric(f"   {label}", value, "üìä")
    
    def _show_behavioral_patterns(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
        if not self.analysis_result.research_findings:
            self._print_error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö!")
            return
        
        patterns = self.analysis_result.research_findings.behavioral_patterns
        if not patterns:
            self._print_error("–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        self._print_card(f"–ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–ï –ü–ê–¢–¢–ï–†–ù–´ ({len(patterns)} —à—Ç.)", "–ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π")
        
        for i, pattern in enumerate(patterns, 1):
            print(f"\n{self.colors['primary']}{i}. –ü–∞—Ç—Ç–µ—Ä–Ω{self.colors['background']}")
            print(f"{'‚îÄ' * 20}")
            
            pattern_data = [
                ("–¢–∏–ø", pattern.get('pattern_type', 'N/A')),
                ("–ß–∞—Å—Ç–æ—Ç–∞", pattern.get('frequency', 'N/A')),
                ("–°–∏–ª–∞", pattern.get('strength', 'N/A'))
            ]
            
            for label, value in pattern_data:
                if value != 'N/A':
                    self._print_metric(f"   {label}", value, "üìä")
            
            description = pattern.get('pattern', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
            print(f"\n   –û–ø–∏—Å–∞–Ω–∏–µ: {description[:100]}...")
    
    def _show_business_aspects(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∏–∑–Ω–µ—Å-–∞—Å–ø–µ–∫—Ç—ã"""
        all_business_pains = []
        all_opportunities = []
        
        for summary in self.analysis_result.interview_summaries:
            all_business_pains.extend(summary.business_pains or [])
            all_opportunities.extend(summary.opportunities or [])
        
        self._print_card("–ë–ò–ó–ù–ï–°-–ê–°–ü–ï–ö–¢–´", "–ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–≤–ª–∏—è–Ω–∏—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
        
        if all_business_pains:
            print(f"\n{self.colors['primary']}üò§ –ë–∏–∑–Ω–µ—Å-–ø—Ä–æ–±–ª–µ–º—ã ({len(all_business_pains)} —à—Ç.):{self.colors['background']}")
            print(f"{'‚îÄ' * 40}")
            
            for i, pain in enumerate(all_business_pains[:3], 1):
                print(f"\n   {i}. {pain.get('pain', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')[:100]}...")
                urgency = pain.get('urgency', 'N/A')
                if urgency != 'N/A':
                    self._print_metric(f"      –°—Ä–æ—á–Ω–æ—Å—Ç—å", urgency, "üìä")
        
        if all_opportunities:
            print(f"\n{self.colors['primary']}üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ({len(all_opportunities)} —à—Ç.):{self.colors['background']}")
            print(f"{'‚îÄ' * 30}")
            
            for i, opp in enumerate(all_opportunities[:3], 1):
                print(f"\n   {i}. {opp.get('opportunity', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')[:100]}...")
                opp_type = opp.get('opportunity_type', 'N/A')
                if opp_type != 'N/A':
                    self._print_metric(f"      –¢–∏–ø", opp_type, "üìä")
    
    def _generate_reports(self, config):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤"""
        self._print_card("–ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–û–í", "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö")
        
        if not self.analysis_result:
            self._print_error("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤!")
            return
        
        print(f"\n{self.colors['primary']}–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞:{self.colors['background']}")
        print("1. üåê HTML –æ—Ç—á–µ—Ç")
        print("2. üìÑ DOCX –æ—Ç—á–µ—Ç")
        print("3. üìã PDF –æ—Ç—á–µ—Ç")
        print("4. üîß JSON –¥–∞–Ω–Ω—ã–µ")
        print("5. üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç")
        
        choice = input(f"\n{self.colors['primary']}–í—ã–±–µ—Ä–∏—Ç–µ (1-5):{self.colors['background']} ").strip()
        
        if choice == "1":
            self._generate_html_report(config)
        elif choice == "2":
            self._generate_docx_report(config)
        elif choice == "3":
            self._generate_pdf_report(config)
        elif choice == "4":
            self._generate_json_report()
        elif choice == "5":
            self._generate_text_report()
        else:
            self._print_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
    
    def _generate_html_report(self, config):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞"""
        self._print_info("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞...")
        
        try:
            from core.report_generator import ReportGenerator
            
            generator = ReportGenerator(config)
            html_content = generator.generate_html(self.analysis_result)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            output_file = "ux_analysis_report.html"
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            self._print_success(f"HTML –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
            
        except ImportError:
            self._print_error("–ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        except Exception as e:
            self._print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    def _generate_docx_report(self, config):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è DOCX –æ—Ç—á–µ—Ç–∞"""
        self._print_info("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è DOCX –æ—Ç—á–µ—Ç–∞...")
        
        try:
            from core.report_generator import ReportGenerator
            
            generator = ReportGenerator(config)
            output_file = generator.generate_docx(self.analysis_result)
            
            if output_file:
                self._print_success(f"DOCX –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
            else:
                self._print_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å DOCX –æ—Ç—á–µ—Ç")
            
        except ImportError:
            self._print_error("–ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        except Exception as e:
            self._print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    def _generate_pdf_report(self, config):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞"""
        self._print_info("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞...")
        
        try:
            from core.report_generator import ReportGenerator
            
            generator = ReportGenerator(config)
            html_content = generator.generate_html(self.analysis_result)
            output_file = generator.generate_pdf(html_content)
            
            if output_file:
                self._print_success(f"PDF –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
            else:
                self._print_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF –æ—Ç—á–µ—Ç")
            
        except ImportError:
            self._print_error("–ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        except Exception as e:
            self._print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    def _generate_json_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON –æ—Ç—á–µ—Ç–∞"""
        self._print_info("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON –æ—Ç—á–µ—Ç–∞...")
        
        try:
            import json
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è JSON
            report_data = {
                'analysis_metadata': {
                    'total_interviews': self.analysis_result.total_interviews,
                    'analysis_duration': self.analysis_result.analysis_duration,
                    'api_calls': self.analysis_result.api_calls,
                    'total_cost': self.analysis_result.total_cost
                },
                'interview_summaries': [
                    {
                        'interview_id': s.interview_id,
                        'pain_points': s.pain_points,
                        'needs': s.needs,
                        'quotes': s.quotes,
                        'sentiment_score': s.sentiment_score
                    }
                    for s in self.analysis_result.interview_summaries
                ]
            }
            
            if self.analysis_result.research_findings:
                report_data['research_findings'] = {
                    'executive_summary': self.analysis_result.research_findings.executive_summary,
                    'key_insights': self.analysis_result.research_findings.key_insights,
                    'recommendations': self.analysis_result.research_findings.recommendations
                }
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            output_file = "ux_analysis_report.json"
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, ensure_ascii=False, indent=2)
            
            self._print_success(f"JSON –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
            
        except Exception as e:
            self._print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JSON: {e}")
    
    def _generate_text_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self._print_info("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        
        try:
            output_file = "ux_analysis_report.txt"
            
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write("UX –ê–ù–ê–õ–ò–ó –û–¢–ß–ï–¢\n")
                f.write("=" * 50 + "\n\n")
                
                f.write(f"–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
                f.write(f"- –ò–Ω—Ç–µ—Ä–≤—å—é –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {self.analysis_result.total_interviews}\n")
                f.write(f"- –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {self.analysis_result.analysis_duration:.1f} —Å–µ–∫\n")
                f.write(f"- API –≤—ã–∑–æ–≤–æ–≤: {self.analysis_result.api_calls}\n")
                f.write(f"- –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${self.analysis_result.total_cost:.4f}\n\n")
                
                if self.analysis_result.research_findings:
                    findings = self.analysis_result.research_findings
                    f.write("–ö–õ–Æ–ß–ï–í–´–ï –ù–ê–•–û–î–ö–ò:\n")
                    f.write(f"- {len(findings.key_insights)} –∏–Ω—Å–∞–π—Ç–æ–≤\n")
                    f.write(f"- {len(findings.behavioral_patterns)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤\n")
                    f.write(f"- {len(findings.recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n\n")
                    
                    if findings.executive_summary:
                        f.write("–ö–†–ê–¢–ö–û–ï –†–ï–ó–Æ–ú–ï:\n")
                        f.write(f"{findings.executive_summary}\n\n")
                
                f.write("–î–ï–¢–ê–õ–ò –ü–û –ò–ù–¢–ï–†–í–¨–Æ:\n")
                for i, summary in enumerate(self.analysis_result.interview_summaries, 1):
                    f.write(f"\n{i}. –ò–Ω—Ç–µ—Ä–≤—å—é #{summary.interview_id}\n")
                    f.write(f"   –ë–æ–ª–∏: {len(summary.pain_points)}\n")
                    f.write(f"   –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏: {len(summary.needs)}\n")
                    f.write(f"   –¶–∏—Ç–∞—Ç—ã: {len(summary.quotes)}\n")
                    f.write(f"   Sentiment: {summary.sentiment_score:.2f}\n")
            
            self._print_success(f"–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
            
        except Exception as e:
            self._print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
